

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Sep 22 16:15:14 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 2.00
    35                           ; Generated 27/05/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F2550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     _TMR1	set	4046
    69  0000                     _TMR1H	set	4047
    70  0000                     _TMR1L	set	4046
    71  0000                     _TXREG	set	4013
    72  0000                     _SPBRG	set	4015
    73  0000                     _RC1	set	31761
    74  0000                     _GIE	set	32663
    75  0000                     _PEIE	set	32662
    76  0000                     _TMR1IE	set	31976
    77  0000                     _TMR1ON	set	32360
    78  0000                     _T1CKPS1	set	32365
    79  0000                     _T1CKPS0	set	32364
    80  0000                     _TMR1CS	set	32361
    81  0000                     _TRMT	set	32097
    82  0000                     _TXEN	set	32101
    83  0000                     _TRISC7	set	31911
    84  0000                     _TRISC6	set	31910
    85  0000                     _BRG16	set	32195
    86  0000                     _SPEN	set	32095
    87  0000                     _SYNC	set	32100
    88  0000                     _BRGH	set	32098
    89  0000                     _TMR1IF	set	31984
    90  0000                     _TRISC1	set	31905
    91  0000                     _RC2	set	31762
    92  0000                     _TRISC2	set	31906
    93  0000                     _RB0	set	31752
    94  0000                     _TRISB0	set	31896
    95                           
    96                           	psect	smallconst
    97  000800                     __psmallconst:
    98                           	opt stack 0
    99  000800  00                 	db	0
   100  000801                     STR_1:
   101  000801  4F                 	db	79	;'O'
   102  000802  4D                 	db	77	;'M'
   103  000803  47                 	db	71	;'G'
   104  000804  20                 	db	32
   105  000805  50                 	db	80	;'P'
   106  000806  4C                 	db	76	;'L'
   107  000807  5A                 	db	90	;'Z'
   108  000808  5A                 	db	90	;'Z'
   109  000809  5A                 	db	90	;'Z'
   110  00080A  00                 	db	0
   111  00080B                     STR_2:
   112  00080B  25                 	db	37
   113  00080C  64                 	db	100	;'d'
   114  00080D  0A                 	db	10
   115  00080E  0D                 	db	13
   116  00080F  00                 	db	0
   117                           
   118                           ; #config settings
   119  000810  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  00125E                     __pcinit:
   123                           	opt stack 0
   124  00125E                     start_initialization:
   125                           	opt stack 0
   126  00125E                     __initialization:
   127                           	opt stack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (55 bytes)
   130  00125E  EE00  F060         	lfsr	0,__pbssBANK0
   131  001262  0E37               	movlw	55
   132  001264                     clear_0:
   133  001264  6AEE               	clrf	postinc0,c
   134  001266  06E8               	decf	wreg,f,c
   135  001268  E1FD               	bnz	clear_0
   136  00126A                     end_of_initialization:
   137                           	opt stack 0
   138  00126A                     __end_of__initialization:
   139                           	opt stack 0
   140  00126A  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   141  00126C  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   142  00126E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   143  001270  6EF8               	movwf	tblptru,c
   144  001272  0100               	movlb	0
   145  001274  EFB7  F008         	goto	_main	;jump to C main() function
   146                           tblptru	equ	0xFF8
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           
   150                           	psect	bssBANK0
   151  000060                     __pbssBANK0:
   152                           	opt stack 0
   153  000060                     _Ticks:
   154                           	opt stack 0
   155  000060                     	ds	4
   156  000064                     _nout:
   157                           	opt stack 0
   158  000064                     	ds	2
   159  000066                     _width:
   160                           	opt stack 0
   161  000066                     	ds	2
   162  000068                     _prec:
   163                           	opt stack 0
   164  000068                     	ds	2
   165  00006A                     _flags:
   166                           	opt stack 0
   167  00006A                     	ds	2
   168  00006C                     _TMR1_C:
   169                           	opt stack 0
   170  00006C                     	ds	1
   171  00006D                     _dbuf:
   172                           	opt stack 0
   173  00006D                     	ds	32
   174  00008D                     _Buffer:
   175                           	opt stack 0
   176  00008D                     	ds	10
   177                           tblptru	equ	0xFF8
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181                           	psect	cstackBANK0
   182  000097                     __pcstackBANK0:
   183                           	opt stack 0
   184  000097                     ?_sprintf:
   185                           	opt stack 0
   186  000097                     sprintf@s:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x0
   190  000097                     	ds	2
   191  000099                     sprintf@fmt:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000099                     	ds	6
   196  00009F                     sprintf@ret:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x8
   200  00009F                     	ds	2
   201  0000A1                     sprintf@ap:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0xA
   205  0000A1                     	ds	2
   206  0000A3                     sprintf@f:
   207                           	opt stack 0
   208                           
   209                           ; 6 bytes @ 0xC
   210  0000A3                     	ds	6
   211                           tblptru	equ	0xFF8
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           
   215                           	psect	cstackCOMRAM
   216  000001                     __pcstackCOMRAM:
   217                           	opt stack 0
   218  000001                     ?_strlen:
   219                           	opt stack 0
   220  000001                     ?___aodiv:
   221                           	opt stack 0
   222  000001                     ?___aomod:
   223                           	opt stack 0
   224  000001                     UART_Write@data:
   225                           	opt stack 0
   226  000001                     fputc@c:
   227                           	opt stack 0
   228  000001                     strlen@s:
   229                           	opt stack 0
   230  000001                     ___aodiv@dividend:
   231                           	opt stack 0
   232  000001                     ___aomod@dividend:
   233                           	opt stack 0
   234                           
   235                           ; 8 bytes @ 0x0
   236  000001                     	ds	1
   237  000002                     UART_Write_String@text:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x1
   241  000002                     	ds	1
   242  000003                     ??_strlen:
   243  000003                     fputc@fp:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x2
   247  000003                     	ds	1
   248  000004                     ??_UART_Write_String:
   249                           
   250                           ; 1 bytes @ 0x3
   251  000004                     	ds	1
   252  000005                     ??_fputc:
   253  000005                     strlen@a:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x4
   257  000005                     	ds	1
   258  000006                     UART_Write_String@i:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x5
   262  000006                     	ds	3
   263  000009                     ___aodiv@divisor:
   264                           	opt stack 0
   265  000009                     ___aomod@divisor:
   266                           	opt stack 0
   267                           
   268                           ; 8 bytes @ 0x8
   269  000009                     	ds	1
   270  00000A                     fputs@s:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x9
   274  00000A                     	ds	2
   275  00000C                     fputs@fp:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0xB
   279  00000C                     	ds	2
   280  00000E                     fputs@c:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0xD
   284  00000E                     	ds	1
   285  00000F                     fputs@i:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0xE
   289  00000F                     	ds	2
   290  000011                     ?_pad:
   291                           	opt stack 0
   292  000011                     ___aodiv@counter:
   293                           	opt stack 0
   294  000011                     ___aomod@counter:
   295                           	opt stack 0
   296  000011                     pad@fp:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x10
   300  000011                     	ds	1
   301  000012                     ___aodiv@sign:
   302                           	opt stack 0
   303  000012                     ___aomod@sign:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x11
   307  000012                     	ds	1
   308  000013                     ?_abs:
   309                           	opt stack 0
   310  000013                     pad@buf:
   311                           	opt stack 0
   312  000013                     abs@a:
   313                           	opt stack 0
   314  000013                     ___aodiv@quotient:
   315                           	opt stack 0
   316                           
   317                           ; 8 bytes @ 0x12
   318  000013                     	ds	2
   319  000015                     ??_abs:
   320  000015                     pad@p:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x14
   324  000015                     	ds	2
   325  000017                     ??_pad:
   326                           
   327                           ; 1 bytes @ 0x16
   328  000017                     	ds	1
   329  000018                     pad@i:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x17
   333  000018                     	ds	2
   334  00001A                     pad@w:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x19
   338  00001A                     	ds	2
   339  00001C                     ?_dtoa:
   340                           	opt stack 0
   341  00001C                     dtoa@fp:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x1B
   345  00001C                     	ds	2
   346  00001E                     dtoa@d:
   347                           	opt stack 0
   348                           
   349                           ; 8 bytes @ 0x1D
   350  00001E                     	ds	8
   351  000026                     ??_dtoa:
   352                           
   353                           ; 1 bytes @ 0x25
   354  000026                     	ds	8
   355  00002E                     _dtoa$151:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2D
   359  00002E                     	ds	2
   360  000030                     dtoa@p:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x2F
   364  000030                     	ds	2
   365  000032                     dtoa@w:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x31
   369  000032                     	ds	2
   370  000034                     dtoa@s:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x33
   374  000034                     	ds	2
   375  000036                     dtoa@n:
   376                           	opt stack 0
   377                           
   378                           ; 8 bytes @ 0x35
   379  000036                     	ds	8
   380  00003E                     dtoa@i:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x3D
   384  00003E                     	ds	2
   385  000040                     ?_vfpfcnvrt:
   386                           	opt stack 0
   387  000040                     vfpfcnvrt@fp:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x3F
   391  000040                     	ds	2
   392  000042                     vfpfcnvrt@fmt:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x41
   396  000042                     	ds	2
   397  000044                     vfpfcnvrt@ap:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x43
   401  000044                     	ds	2
   402  000046                     ??_vfpfcnvrt:
   403                           
   404                           ; 1 bytes @ 0x45
   405  000046                     	ds	2
   406  000048                     vfpfcnvrt@ll:
   407                           	opt stack 0
   408                           
   409                           ; 8 bytes @ 0x47
   410  000048                     	ds	8
   411  000050                     ?_vfprintf:
   412                           	opt stack 0
   413  000050                     vfprintf@fp:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x4F
   417  000050                     	ds	2
   418  000052                     vfprintf@fmt:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x51
   422  000052                     	ds	2
   423  000054                     vfprintf@ap:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x53
   427  000054                     	ds	2
   428  000056                     vfprintf@cfmt:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x55
   432  000056                     	ds	2
   433  000058                     ??_Touch_Sense:
   434  000058                     
   435                           ; 1 bytes @ 0x57
   436  000058                     	ds	4
   437  00005C                     ??_main:
   438                           
   439                           ; 1 bytes @ 0x5B
   440  00005C                     	ds	2
   441                           tblptru	equ	0xFF8
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           
   445 ;;
   446 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   447 ;;
   448 ;; *************** function _main *****************
   449 ;; Defined at:
   450 ;;		line 26 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   464 ;;      Params:         0       0       0       0       0       0       0       0       0
   465 ;;      Locals:         0       0       0       0       0       0       0       0       0
   466 ;;      Temps:          2       0       0       0       0       0       0       0       0
   467 ;;      Totals:         2       0       0       0       0       0       0       0       0
   468 ;;Total ram usage:        2 bytes
   469 ;; Hardware stack levels required when called:   10
   470 ;; This function calls:
   471 ;;		_TMR1_Init
   472 ;;		_Touch_Sense
   473 ;;		_UART_TX_Init
   474 ;;		_UART_Write_String
   475 ;; This function is called by:
   476 ;;		Startup code after reset
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           	psect	text0
   481  00116E                     __ptext0:
   482                           	opt stack 0
   483  00116E                     _main:
   484                           	opt stack 21
   485                           
   486                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 28:     TRISB0 =
      +                           0;
   487                           
   488                           ;incstack = 0
   489  00116E  9093               	bcf	3987,0,c	;volatile
   490                           
   491                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 29:     RB0 = 0;
   492  001170  9081               	bcf	3969,0,c	;volatile
   493                           
   494                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 30:     TRISC2 =
      +                           0;
   495  001172  9494               	bcf	3988,2,c	;volatile
   496                           
   497                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 31:     RC2 = 0;
   498  001174  9482               	bcf	3970,2,c	;volatile
   499                           
   500                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 32:     TRISC1 =
      +                           1;
   501  001176  8294               	bsf	3988,1,c	;volatile
   502                           
   503                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 33:     TMR1_Ini
      +                          t();
   504  001178  EC3C  F009         	call	_TMR1_Init	;wreg free
   505                           
   506                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 34:     UART_TX_
      +                          Init();
   507  00117C  EC49  F009         	call	_UART_TX_Init	;wreg free
   508                           
   509                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 35:     _delay((
      +                          unsigned long)((500)*(48000000/4000.0)));
   510  001180  0E1F               	movlw	31
   511  001182  6E5D               	movwf	(??_main+1)& (0+255),c
   512  001184  0E71               	movlw	113
   513  001186  6E5C               	movwf	??_main& (0+255),c
   514  001188  0E1E               	movlw	30
   515  00118A                     u1097:
   516  00118A  2EE8               	decfsz	wreg,f,c
   517  00118C  D7FE               	bra	u1097
   518  00118E  2E5C               	decfsz	??_main& (0+255),f,c
   519  001190  D7FC               	bra	u1097
   520  001192  2E5D               	decfsz	(??_main+1)& (0+255),f,c
   521  001194  D7FA               	bra	u1097
   522  001196  D000               	nop2	
   523                           
   524                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 36:     UART_Wri
      +                          te_String("OMG PLZZZ");
   525  001198  0E01               	movlw	low STR_1
   526  00119A  6E02               	movwf	UART_Write_String@text,c
   527  00119C  0E08               	movlw	high STR_1
   528  00119E  6E03               	movwf	UART_Write_String@text+1,c
   529  0011A0  EC26  F008         	call	_UART_Write_String	;wreg free
   530  0011A4                     
   531                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 38:     {;C:/Use
      +                          rs/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 39:        Touch_Sense(
      +                          );
   532  0011A4  EC2D  F007         	call	_Touch_Sense	;wreg free
   533                           
   534                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 40:        _dela
      +                          y((unsigned long)((10)*(48000000/4000.0)));
   535  0011A8  0E9C               	movlw	156
   536  0011AA  6E5C               	movwf	??_main& (0+255),c
   537  0011AC  0ED7               	movlw	215
   538  0011AE                     u1107:
   539  0011AE  2EE8               	decfsz	wreg,f,c
   540  0011B0  D7FE               	bra	u1107
   541  0011B2  2E5C               	decfsz	??_main& (0+255),f,c
   542  0011B4  D7FC               	bra	u1107
   543  0011B6  F000               	nop	
   544                           
   545                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 41:     }
   546  0011B8  D7F5               	goto	l77
   547  0011BA                     __end_of_main:
   548                           	opt stack 0
   549                           tblptru	equ	0xFF8
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553 ;; *************** function _UART_TX_Init *****************
   554 ;; Defined at:
   555 ;;		line 53 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, status,2
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         0       0       0       0       0       0       0       0       0
   570 ;;      Locals:         0       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         0       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        0 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; Hardware stack levels required when called:    1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text1
   584  001292                     __ptext1:
   585                           	opt stack 0
   586  001292                     _UART_TX_Init:
   587                           	opt stack 29
   588                           
   589                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 55:   BRGH = 1;
   590                           
   591                           ;incstack = 0
   592  001292  84AC               	bsf	4012,2,c	;volatile
   593                           
   594                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 56:   SPBRG = 51
      +                          ;
   595  001294  0E33               	movlw	51
   596  001296  6EAF               	movwf	4015,c	;volatile
   597                           
   598                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 58:   SYNC = 0;
   599  001298  98AC               	bcf	4012,4,c	;volatile
   600                           
   601                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 59:   SPEN = 1;
   602  00129A  8EAB               	bsf	4011,7,c	;volatile
   603                           
   604                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 60:   BRG16 = 0;
   605  00129C  96B8               	bcf	4024,3,c	;volatile
   606                           
   607                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 62:   TRISC6 = 0
      +                          ;
   608  00129E  9C94               	bcf	3988,6,c	;volatile
   609                           
   610                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 63:   TRISC7 = 1
      +                          ;
   611  0012A0  8E94               	bsf	3988,7,c	;volatile
   612                           
   613                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 64:   TXEN = 1;
   614  0012A2  8AAC               	bsf	4012,5,c	;volatile
   615  0012A4  0012               	return		;funcret
   616  0012A6                     __end_of_UART_TX_Init:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           
   622 ;; *************** function _Touch_Sense *****************
   623 ;; Defined at:
   624 ;;		line 96 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;		None
   627 ;; Auto vars:     Size  Location     Type
   628 ;;		None
   629 ;; Return value:  Size  Location     Type
   630 ;;                  1    wreg      void 
   631 ;; Registers used:
   632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   638 ;;      Params:         0       0       0       0       0       0       0       0       0
   639 ;;      Locals:         0       0       0       0       0       0       0       0       0
   640 ;;      Temps:          4       0       0       0       0       0       0       0       0
   641 ;;      Totals:         4       0       0       0       0       0       0       0       0
   642 ;;Total ram usage:        4 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    9
   645 ;; This function calls:
   646 ;;		_UART_Write_String
   647 ;;		_sprintf
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text2
   654  000E5A                     __ptext2:
   655                           	opt stack 0
   656  000E5A                     _Touch_Sense:
   657                           	opt stack 21
   658                           
   659                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 98:     TMR1L = 
      +                          0x00;
   660                           
   661                           ;incstack = 0
   662  000E5A  0E00               	movlw	0
   663  000E5C  6ECE               	movwf	4046,c	;volatile
   664                           
   665                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 99:     TMR1H = 
      +                          0x00;
   666  000E5E  0E00               	movlw	0
   667  000E60  6ECF               	movwf	4047,c	;volatile
   668                           
   669                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 100:     RC2 = 1
      +                          ;
   670  000E62  8482               	bsf	3970,2,c	;volatile
   671                           
   672                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 101:     TMR1ON 
      +                          = 1;
   673  000E64  80CD               	bsf	4045,0,c	;volatile
   674  000E66  A282               	btfss	3970,1,c	;volatile
   675  000E68  D7FE               	goto	l108
   676                           
   677                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 103:     TMR1ON 
      +                          = 0;
   678  000E6A  90CD               	bcf	4045,0,c	;volatile
   679                           
   680                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 104:     Ticks =
      +                           TMR1;
   681  000E6C  CFCE F060          	movff	4046,_Ticks	;volatile
   682  000E70  CFCF F061          	movff	4047,_Ticks+1	;volatile
   683  000E74  0100               	movlb	0	; () banked
   684  000E76  6B62               	clrf	(_Ticks+2)& (0+255),b
   685  000E78  6B63               	clrf	(_Ticks+3)& (0+255),b
   686                           
   687                           ; BSR set to: 0
   688                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 105:     if(TMR1
      +                          _C)
   689  000E7A  516C               	movf	_TMR1_C& (0+255),w,b
   690  000E7C  B4D8               	btfsc	status,2,c
   691  000E7E  D015               	goto	l110
   692                           
   693                           ; BSR set to: 0
   694                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 106:     {;C:/Us
      +                          ers/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 107:         Ticks += 
      +                          (TMR1_C*65536);
   695  000E80  C06C  F058         	movff	_TMR1_C,??_Touch_Sense
   696  000E84  6A59               	clrf	(??_Touch_Sense+1)& (0+255),c
   697  000E86  6A5A               	clrf	(??_Touch_Sense+2)& (0+255),c
   698  000E88  6A5B               	clrf	(??_Touch_Sense+3)& (0+255),c
   699  000E8A  C059  F05B         	movff	??_Touch_Sense+1,??_Touch_Sense+3
   700  000E8E  C058  F05A         	movff	??_Touch_Sense,??_Touch_Sense+2
   701  000E92  6A59               	clrf	??_Touch_Sense+1,c
   702  000E94  6A58               	clrf	??_Touch_Sense,c
   703  000E96  5058               	movf	??_Touch_Sense,w,c
   704  000E98  2760               	addwf	_Ticks& (0+255),f,b
   705  000E9A  5059               	movf	??_Touch_Sense+1,w,c
   706  000E9C  2361               	addwfc	(_Ticks+1)& (0+255),f,b
   707  000E9E  505A               	movf	??_Touch_Sense+2,w,c
   708  000EA0  2362               	addwfc	(_Ticks+2)& (0+255),f,b
   709  000EA2  505B               	movf	??_Touch_Sense+3,w,c
   710  000EA4  2363               	addwfc	(_Ticks+3)& (0+255),f,b
   711                           
   712                           ; BSR set to: 0
   713                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 108:         TMR
      +                          1_C = 0;
   714  000EA6  0E00               	movlw	0
   715  000EA8  6F6C               	movwf	_TMR1_C& (0+255),b
   716  000EAA                     l110:
   717                           
   718                           ; BSR set to: 0
   719                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 110:     sprintf
      +                          (Buffer, "%d\n\r", Ticks);
   720                           
   721                           ; BSR set to: 0
   722  000EAA  0E8D               	movlw	low _Buffer
   723  000EAC  6F97               	movwf	sprintf@s& (0+255),b
   724  000EAE  0E00               	movlw	high _Buffer
   725  000EB0  6F98               	movwf	(sprintf@s+1)& (0+255),b
   726  000EB2  0E0B               	movlw	low STR_2
   727  000EB4  6F99               	movwf	sprintf@fmt& (0+255),b
   728  000EB6  0E08               	movlw	high STR_2
   729  000EB8  6F9A               	movwf	(sprintf@fmt+1)& (0+255),b
   730  000EBA  C060  F09B         	movff	_Ticks,?_sprintf+4
   731  000EBE  C061  F09C         	movff	_Ticks+1,?_sprintf+5
   732  000EC2  C062  F09D         	movff	_Ticks+2,?_sprintf+6
   733  000EC6  C063  F09E         	movff	_Ticks+3,?_sprintf+7
   734  000ECA  EC5F  F008         	call	_sprintf	;wreg free
   735                           
   736                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 111:     UART_Wr
      +                          ite_String(Buffer);
   737  000ECE  0E8D               	movlw	low _Buffer
   738  000ED0  6E02               	movwf	UART_Write_String@text,c
   739  000ED2  0E00               	movlw	high _Buffer
   740  000ED4  6E03               	movwf	UART_Write_String@text+1,c
   741  000ED6  EC26  F008         	call	_UART_Write_String	;wreg free
   742                           
   743                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 112:     if(Tick
      +                          s>1500)
   744  000EDA  0100               	movlb	0	; () banked
   745  000EDC  5163               	movf	(_Ticks+3)& (0+255),w,b
   746  000EDE  1162               	iorwf	(_Ticks+2)& (0+255),w,b
   747  000EE0  E106               	bnz	u1050
   748  000EE2  0EDD               	movlw	221
   749  000EE4  5D60               	subwf	_Ticks& (0+255),w,b
   750  000EE6  0E05               	movlw	5
   751  000EE8  5961               	subwfb	(_Ticks+1)& (0+255),w,b
   752  000EEA  A0D8               	btfss	status,0,c
   753  000EEC  D010               	goto	l111
   754  000EEE                     u1050:
   755                           
   756                           ; BSR set to: 0
   757                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 113:     {;C:/Us
      +                          ers/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 114:         RB0 = ~RB
      +                          0;
   758  000EEE  B081               	btfsc	3969,0,c	;volatile
   759  000EF0  D002               	goto	u1060
   760  000EF2  8081               	bsf	3969,0,c	;volatile
   761  000EF4  D001               	goto	u1075
   762  000EF6                     u1060:
   763  000EF6  9081               	bcf	3969,0,c	;volatile
   764  000EF8                     u1075:
   765                           
   766                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 115:         _de
      +                          lay((unsigned long)((200)*(48000000/4000.0)));
   767  000EF8  0E0D               	movlw	13
   768  000EFA  6E59               	movwf	(??_Touch_Sense+1)& (0+255),c
   769  000EFC  0E2D               	movlw	45
   770  000EFE  6E58               	movwf	??_Touch_Sense& (0+255),c
   771  000F00  0ED8               	movlw	216
   772  000F02                     u1117:
   773  000F02  2EE8               	decfsz	wreg,f,c
   774  000F04  D7FE               	bra	u1117
   775  000F06  2E58               	decfsz	??_Touch_Sense& (0+255),f,c
   776  000F08  D7FC               	bra	u1117
   777  000F0A  2E59               	decfsz	(??_Touch_Sense+1)& (0+255),f,c
   778  000F0C  D7FA               	bra	u1117
   779  000F0E                     l111:
   780                           
   781                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 117:     RC2 = 0
      +                          ;
   782  000F0E  9482               	bcf	3970,2,c	;volatile
   783  000F10  0012               	return		;funcret
   784  000F12                     __end_of_Touch_Sense:
   785                           	opt stack 0
   786                           tblptru	equ	0xFF8
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _sprintf *****************
   792 ;; Defined at:
   793 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_sprintf.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  s               2    0[BANK0 ] PTR unsigned char 
   796 ;;		 -> Buffer(10), 
   797 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
   798 ;;		 -> STR_2(5), 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  f               6   12[BANK0 ] struct _IO_FILE
   801 ;;  ap              2   10[BANK0 ] PTR void [1]
   802 ;;		 -> ?_sprintf(2), 
   803 ;;  ret             2    8[BANK0 ] int 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  2    0[BANK0 ] int 
   806 ;; Registers used:
   807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   813 ;;      Params:         0       8       0       0       0       0       0       0       0
   814 ;;      Locals:         0      10       0       0       0       0       0       0       0
   815 ;;      Temps:          0       0       0       0       0       0       0       0       0
   816 ;;      Totals:         0      18       0       0       0       0       0       0       0
   817 ;;Total ram usage:       18 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    8
   820 ;; This function calls:
   821 ;;		_vfprintf
   822 ;; This function is called by:
   823 ;;		_Touch_Sense
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text3
   828  0010BE                     __ptext3:
   829                           	opt stack 0
   830  0010BE                     _sprintf:
   831                           	opt stack 21
   832                           
   833                           ;incstack = 0
   834  0010BE  0E9B               	movlw	low (?_sprintf+4)
   835  0010C0  0100               	movlb	0	; () banked
   836  0010C2  6FA1               	movwf	sprintf@ap& (0+255),b
   837  0010C4  0E00               	movlw	high (?_sprintf+4)
   838  0010C6  6FA2               	movwf	(sprintf@ap+1)& (0+255),b
   839  0010C8  C097  F0A3         	movff	sprintf@s,sprintf@f
   840  0010CC  C098  F0A4         	movff	sprintf@s+1,sprintf@f+1
   841                           
   842                           ; BSR set to: 0
   843  0010D0  0E00               	movlw	0
   844  0010D2  6FA6               	movwf	(sprintf@f+3)& (0+255),b
   845  0010D4  0E00               	movlw	0
   846  0010D6  6FA5               	movwf	(sprintf@f+2)& (0+255),b
   847                           
   848                           ; BSR set to: 0
   849  0010D8  0E00               	movlw	0
   850  0010DA  6FA8               	movwf	(sprintf@f+5)& (0+255),b
   851  0010DC  0E00               	movlw	0
   852  0010DE  6FA7               	movwf	(sprintf@f+4)& (0+255),b
   853                           
   854                           ; BSR set to: 0
   855  0010E0  0EA3               	movlw	low sprintf@f
   856  0010E2  6E50               	movwf	vfprintf@fp,c
   857  0010E4  0E00               	movlw	high sprintf@f
   858  0010E6  6E51               	movwf	vfprintf@fp+1,c
   859  0010E8  C099  F052         	movff	sprintf@fmt,vfprintf@fmt
   860  0010EC  C09A  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   861  0010F0  0EA1               	movlw	low sprintf@ap
   862  0010F2  6E54               	movwf	vfprintf@ap,c
   863  0010F4  0E00               	movlw	high sprintf@ap
   864  0010F6  6E55               	movwf	vfprintf@ap+1,c
   865  0010F8  EC8C  F008         	call	_vfprintf	;wreg free
   866  0010FC  C050  F09F         	movff	?_vfprintf,sprintf@ret
   867  001100  C051  F0A0         	movff	?_vfprintf+1,sprintf@ret+1
   868  001104  0100               	movlb	0	; () banked
   869  001106  51A5               	movf	(sprintf@f+2)& (0+255),w,b
   870  001108  2597               	addwf	sprintf@s& (0+255),w,b
   871  00110A  6ED9               	movwf	fsr2l,c
   872  00110C  51A6               	movf	(sprintf@f+3)& (0+255),w,b
   873  00110E  2198               	addwfc	(sprintf@s+1)& (0+255),w,b
   874  001110  6EDA               	movwf	fsr2h,c
   875  001112  0E00               	movlw	0
   876  001114  6EDF               	movwf	indf2,c
   877  001116  0012               	return	
   878  001118                     __end_of_sprintf:
   879                           	opt stack 0
   880                           tblptru	equ	0xFF8
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           indf2	equ	0xFDF
   884                           fsr2h	equ	0xFDA
   885                           fsr2l	equ	0xFD9
   886                           status	equ	0xFD8
   887                           
   888 ;; *************** function _vfprintf *****************
   889 ;; Defined at:
   890 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   893 ;;		 -> sprintf@f(6), 
   894 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   895 ;;		 -> STR_2(5), 
   896 ;;  ap              2   83[COMRAM] PTR PTR void 
   897 ;;		 -> sprintf@ap(2), 
   898 ;; Auto vars:     Size  Location     Type
   899 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   900 ;;		 -> STR_2(5), 
   901 ;; Return value:  Size  Location     Type
   902 ;;                  2   79[COMRAM] int 
   903 ;; Registers used:
   904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   910 ;;      Params:         6       0       0       0       0       0       0       0       0
   911 ;;      Locals:         2       0       0       0       0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0       0       0
   913 ;;      Totals:         8       0       0       0       0       0       0       0       0
   914 ;;Total ram usage:        8 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    7
   917 ;; This function calls:
   918 ;;		_vfpfcnvrt
   919 ;; This function is called by:
   920 ;;		_sprintf
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text4
   925  001118                     __ptext4:
   926                           	opt stack 0
   927  001118                     _vfprintf:
   928                           	opt stack 21
   929                           
   930                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.00\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   931                           
   932                           ; BSR set to: 0
   933                           ;incstack = 0
   934  001118  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   935  00111C  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   936                           
   937                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   938  001120  0E00               	movlw	0
   939  001122  0100               	movlb	0	; () banked
   940  001124  6F65               	movwf	(_nout+1)& (0+255),b
   941  001126  0E00               	movlw	0
   942  001128  6F64               	movwf	_nout& (0+255),b
   943                           
   944                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   945  00112A  D013               	goto	l181
   946  00112C                     
   947                           ; BSR set to: 0
   948                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   949                           
   950                           ; BSR set to: 0
   951  00112C  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   952  001130  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   953  001134  0E56               	movlw	low vfprintf@cfmt
   954  001136  6E42               	movwf	vfpfcnvrt@fmt,c
   955  001138  0E00               	movlw	high vfprintf@cfmt
   956  00113A  6E43               	movwf	vfpfcnvrt@fmt+1,c
   957  00113C  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   958  001140  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   959  001144  EC32  F005         	call	_vfpfcnvrt	;wreg free
   960  001148  5040               	movf	?_vfpfcnvrt,w,c
   961  00114A  0100               	movlb	0	; () banked
   962  00114C  2764               	addwf	_nout& (0+255),f,b
   963  00114E  5041               	movf	?_vfpfcnvrt+1,w,c
   964  001150  2365               	addwfc	(_nout+1)& (0+255),f,b
   965  001152                     l181:
   966                           
   967                           ; BSR set to: 0
   968                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   969                           
   970                           ; BSR set to: 0
   971  001152  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   972  001156  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   973  00115A                     	if	0	;tblptru may be non-zero
   974  00115A                     	endif
   975  00115A                     	if	0	;tblptru may be non-zero
   976  00115A                     	endif
   977  00115A  0008               	tblrd		*
   978  00115C  50F5               	movf	tablat,w,c
   979  00115E  0900               	iorlw	0
   980  001160  A4D8               	btfss	status,2,c
   981  001162  D7E4               	goto	l182
   982                           
   983                           ; BSR set to: 0
   984                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   985  001164  C064  F050         	movff	_nout,?_vfprintf
   986  001168  C065  F051         	movff	_nout+1,?_vfprintf+1
   987                           
   988                           ; BSR set to: 0
   989  00116C  0012               	return		;funcret
   990  00116E                     __end_of_vfprintf:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           indf2	equ	0xFDF
   999                           fsr2h	equ	0xFDA
  1000                           fsr2l	equ	0xFD9
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function _vfpfcnvrt *****************
  1004 ;; Defined at:
  1005 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1008 ;;		 -> sprintf@f(6), 
  1009 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1010 ;;		 -> vfprintf@cfmt(2), 
  1011 ;;  ap              2   67[COMRAM] PTR PTR void 
  1012 ;;		 -> sprintf@ap(2), 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  ll              8   71[COMRAM] long long 
  1015 ;;  llu             8    0        unsigned long long 
  1016 ;;  f               4    0        unsigned long long 
  1017 ;;  vp              3    0        PTR void 
  1018 ;;  ct              3    0        unsigned char [3]
  1019 ;;  cp              3    0        PTR unsigned char 
  1020 ;;  i               2    0        int 
  1021 ;;  done            2    0        int 
  1022 ;;  c               1    0        unsigned char 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  2   63[COMRAM] int 
  1025 ;; Registers used:
  1026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1032 ;;      Params:         6       0       0       0       0       0       0       0       0
  1033 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1034 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1035 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1036 ;;Total ram usage:       16 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    6
  1039 ;; This function calls:
  1040 ;;		_dtoa
  1041 ;;		_fputc
  1042 ;; This function is called by:
  1043 ;;		_vfprintf
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text5
  1048  000A64                     __ptext5:
  1049                           	opt stack 0
  1050  000A64                     _vfpfcnvrt:
  1051                           	opt stack 21
  1052                           
  1053                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.00\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.00\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;incstack = 0
  1057  000A64  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1058  000A68  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1059  000A6C  CFDE FFF6          	movff	postinc2,tblptrl
  1060  000A70  CFDD FFF7          	movff	postdec2,tblptrh
  1061  000A74                     	if	0	;tblptru may be non-zero
  1062  000A74                     	endif
  1063  000A74                     	if	0	;tblptru may be non-zero
  1064  000A74                     	endif
  1065  000A74  0008               	tblrd		*
  1066  000A76  50F5               	movf	tablat,w,c
  1067  000A78  0A25               	xorlw	37
  1068  000A7A  A4D8               	btfss	status,2,c
  1069  000A7C  D09A               	goto	l173
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1072  000A7E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1073  000A82  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1074  000A86  2ADE               	incf	postinc2,f,c
  1075  000A88  0E00               	movlw	0
  1076  000A8A  22DD               	addwfc	postdec2,f,c
  1077                           
  1078                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1079  000A8C  0E00               	movlw	0
  1080  000A8E  0100               	movlb	0	; () banked
  1081  000A90  6F67               	movwf	(_width+1)& (0+255),b
  1082  000A92  0E00               	movlw	0
  1083  000A94  6F66               	movwf	_width& (0+255),b
  1084  000A96  C066  F06A         	movff	_width,_flags
  1085  000A9A  C067  F06B         	movff	_width+1,_flags+1
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1089  000A9E  6968               	setf	_prec& (0+255),b
  1090  000AA0  6969               	setf	(_prec+1)& (0+255),b
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1094  000AA2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1095  000AA6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1096  000AAA  CFDE FFF6          	movff	postinc2,tblptrl
  1097  000AAE  CFDD FFF7          	movff	postdec2,tblptrh
  1098  000AB2                     	if	0	;tblptru may be non-zero
  1099  000AB2                     	endif
  1100  000AB2                     	if	0	;tblptru may be non-zero
  1101  000AB2                     	endif
  1102  000AB2  0008               	tblrd		*
  1103  000AB4  50F5               	movf	tablat,w,c
  1104  000AB6  0A64               	xorlw	100
  1105  000AB8  B4D8               	btfsc	status,2,c
  1106  000ABA  D00D               	goto	u960
  1107                           
  1108                           ; BSR set to: 0
  1109  000ABC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1110  000AC0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1111  000AC4  CFDE FFF6          	movff	postinc2,tblptrl
  1112  000AC8  CFDD FFF7          	movff	postdec2,tblptrh
  1113  000ACC                     	if	0	;tblptru may be non-zero
  1114  000ACC                     	endif
  1115  000ACC                     	if	0	;tblptru may be non-zero
  1116  000ACC                     	endif
  1117  000ACC  0008               	tblrd		*
  1118  000ACE  50F5               	movf	tablat,w,c
  1119  000AD0  0A69               	xorlw	105
  1120  000AD2  A4D8               	btfss	status,2,c
  1121  000AD4  D03F               	goto	l174
  1122  000AD6                     u960:
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1126                           
  1127                           ; BSR set to: 0
  1128  000AD6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1129  000ADA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1130  000ADE  2ADE               	incf	postinc2,f,c
  1131  000AE0  0E00               	movlw	0
  1132  000AE2  22DD               	addwfc	postdec2,f,c
  1133                           
  1134                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1135  000AE4  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1136  000AE8  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1137  000AEC  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1138  000AF0  0E02               	movlw	2
  1139  000AF2  26DE               	addwf	postinc2,f,c
  1140  000AF4  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1141  000AF8  0E00               	movlw	0
  1142  000AFA  22DD               	addwfc	postdec2,f,c
  1143  000AFC  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1144  000B00  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1145  000B04  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1146  000B08  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1147  000B0C  0E00               	movlw	0
  1148  000B0E  BE49               	btfsc	vfpfcnvrt@ll+1,7,c
  1149  000B10  0EFF               	movlw	-1
  1150  000B12  6E4A               	movwf	vfpfcnvrt@ll+2,c
  1151  000B14  6E4B               	movwf	vfpfcnvrt@ll+3,c
  1152  000B16  6E4C               	movwf	vfpfcnvrt@ll+4,c
  1153  000B18  6E4D               	movwf	vfpfcnvrt@ll+5,c
  1154  000B1A  6E4E               	movwf	vfpfcnvrt@ll+6,c
  1155  000B1C  6E4F               	movwf	vfpfcnvrt@ll+7,c
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1159  000B1E  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1160  000B22  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1161  000B26  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1162  000B2A  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1163  000B2E  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1164  000B32  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1165  000B36  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1166  000B3A  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1167  000B3E  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1168  000B42  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1169  000B46  EC09  F004         	call	_dtoa	;wreg free
  1170  000B4A  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1171  000B4E  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1172  000B52  0012               	return	
  1173  000B54                     l174:
  1174                           
  1175                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1176  000B54  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1177  000B58  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1178  000B5C  CFDE FFF6          	movff	postinc2,tblptrl
  1179  000B60  CFDD FFF7          	movff	postdec2,tblptrh
  1180  000B64                     	if	0	;tblptru may be non-zero
  1181  000B64                     	endif
  1182  000B64                     	if	0	;tblptru may be non-zero
  1183  000B64                     	endif
  1184  000B64  0008               	tblrd		*
  1185  000B66  50F5               	movf	tablat,w,c
  1186  000B68  0A25               	xorlw	37
  1187  000B6A  A4D8               	btfss	status,2,c
  1188  000B6C  D016               	goto	l178
  1189                           
  1190                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1191  000B6E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1192  000B72  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1193  000B76  2ADE               	incf	postinc2,f,c
  1194  000B78  0E00               	movlw	0
  1195  000B7A  22DD               	addwfc	postdec2,f,c
  1196                           
  1197                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1198  000B7C  0E00               	movlw	0
  1199  000B7E  6E02               	movwf	fputc@c+1,c
  1200  000B80  0E25               	movlw	37
  1201  000B82  6E01               	movwf	fputc@c,c
  1202  000B84  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1203  000B88  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1204  000B8C  EC89  F007         	call	_fputc	;wreg free
  1205                           
  1206                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1207  000B90  0E00               	movlw	0
  1208  000B92  6E41               	movwf	?_vfpfcnvrt+1,c
  1209  000B94  0E01               	movlw	1
  1210  000B96  6E40               	movwf	?_vfpfcnvrt,c
  1211  000B98  0012               	return	
  1212  000B9A                     l178:
  1213                           
  1214                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1215  000B9A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1216  000B9E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1217  000BA2  2ADE               	incf	postinc2,f,c
  1218  000BA4  0E00               	movlw	0
  1219  000BA6  22DD               	addwfc	postdec2,f,c
  1220                           
  1221                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1222  000BA8  0E00               	movlw	0
  1223  000BAA  6E41               	movwf	?_vfpfcnvrt+1,c
  1224  000BAC  0E00               	movlw	0
  1225  000BAE  6E40               	movwf	?_vfpfcnvrt,c
  1226  000BB0  0012               	return	
  1227  000BB2                     l173:
  1228                           
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1230  000BB2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1231  000BB6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1232  000BBA  CFDE FFF6          	movff	postinc2,tblptrl
  1233  000BBE  CFDD FFF7          	movff	postdec2,tblptrh
  1234  000BC2                     	if	0	;tblptru may be non-zero
  1235  000BC2                     	endif
  1236  000BC2                     	if	0	;tblptru may be non-zero
  1237  000BC2                     	endif
  1238  000BC2  0008               	tblrd		*
  1239  000BC4  50F5               	movf	tablat,w,c
  1240  000BC6  6E01               	movwf	fputc@c,c
  1241  000BC8  6A02               	clrf	fputc@c+1,c
  1242  000BCA  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1243  000BCE  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1244  000BD2  EC89  F007         	call	_fputc	;wreg free
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1247  000BD6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1248  000BDA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1249  000BDE  2ADE               	incf	postinc2,f,c
  1250  000BE0  0E00               	movlw	0
  1251  000BE2  22DD               	addwfc	postdec2,f,c
  1252                           
  1253                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1364:     r
      +                          eturn 1;
  1254  000BE4  0E00               	movlw	0
  1255  000BE6  6E41               	movwf	?_vfpfcnvrt+1,c
  1256  000BE8  0E01               	movlw	1
  1257  000BEA  6E40               	movwf	?_vfpfcnvrt,c
  1258  000BEC  0012               	return	
  1259  000BEE                     __end_of_vfpfcnvrt:
  1260                           	opt stack 0
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           indf2	equ	0xFDF
  1268                           postinc2	equ	0xFDE
  1269                           postdec2	equ	0xFDD
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _dtoa *****************
  1275 ;; Defined at:
  1276 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1279 ;;		 -> sprintf@f(6), 
  1280 ;;  d               8   29[COMRAM] long long 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  n               8   53[COMRAM] long long 
  1283 ;;  i               2   61[COMRAM] int 
  1284 ;;  s               2   51[COMRAM] int 
  1285 ;;  w               2   49[COMRAM] int 
  1286 ;;  p               2   47[COMRAM] int 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  2   27[COMRAM] int 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1296 ;;      Params:        10       0       0       0       0       0       0       0       0
  1297 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1298 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1299 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1300 ;;Total ram usage:       36 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    5
  1303 ;; This function calls:
  1304 ;;		___aodiv
  1305 ;;		___aomod
  1306 ;;		_abs
  1307 ;;		_pad
  1308 ;; This function is called by:
  1309 ;;		_vfpfcnvrt
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text6
  1314  000812                     __ptext6:
  1315                           	opt stack 0
  1316  000812                     _dtoa:
  1317                           	opt stack 21
  1318                           
  1319                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.00\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1320                           
  1321                           ;incstack = 0
  1322  000812  C01E  F036         	movff	dtoa@d,dtoa@n
  1323  000816  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1324  00081A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1325  00081E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1326  000822  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1327  000826  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1328  00082A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1329  00082E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1330                           
  1331                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1332  000832  AE3D               	btfss	dtoa@n+7,7,c
  1333  000834  D002               	goto	u790
  1334  000836  0E01               	movlw	1
  1335  000838  D001               	goto	u800
  1336  00083A                     u790:
  1337  00083A  0E00               	movlw	0
  1338  00083C                     u800:
  1339  00083C  6E34               	movwf	dtoa@s,c
  1340  00083E  6A35               	clrf	dtoa@s+1,c
  1341                           
  1342                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1343  000840  5034               	movf	dtoa@s,w,c
  1344  000842  1035               	iorwf	dtoa@s+1,w,c
  1345  000844  B4D8               	btfsc	status,2,c
  1346  000846  D010               	goto	l147
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1349  000848  1E3D               	comf	dtoa@n+7,f,c
  1350  00084A  1E3C               	comf	dtoa@n+6,f,c
  1351  00084C  1E3B               	comf	dtoa@n+5,f,c
  1352  00084E  1E3A               	comf	dtoa@n+4,f,c
  1353  000850  1E39               	comf	dtoa@n+3,f,c
  1354  000852  1E38               	comf	dtoa@n+2,f,c
  1355  000854  1E37               	comf	dtoa@n+1,f,c
  1356  000856  6C36               	negf	dtoa@n,c
  1357  000858  0E00               	movlw	0
  1358  00085A  2237               	addwfc	dtoa@n+1,f,c
  1359  00085C  2238               	addwfc	dtoa@n+2,f,c
  1360  00085E  2239               	addwfc	dtoa@n+3,f,c
  1361  000860  223A               	addwfc	dtoa@n+4,f,c
  1362  000862  223B               	addwfc	dtoa@n+5,f,c
  1363  000864  223C               	addwfc	dtoa@n+6,f,c
  1364  000866  223D               	addwfc	dtoa@n+7,f,c
  1365  000868                     l147:
  1366                           
  1367                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1368  000868  0100               	movlb	0	; () banked
  1369  00086A  AF69               	btfss	(_prec+1)& (0+255),7,b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1373  00086C  936A               	bcf	_flags& (0+255),1,b
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1377                           
  1378                           ; BSR set to: 0
  1379                           
  1380                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 289:     }
  1381  00086E  BF69               	btfsc	(_prec+1)& (0+255),7,b
  1382  000870  D005               	goto	u830
  1383  000872  5169               	movf	(_prec+1)& (0+255),w,b
  1384  000874  E108               	bnz	l150
  1385  000876  0568               	decf	_prec& (0+255),w,b
  1386  000878  B0D8               	btfsc	status,0,c
  1387  00087A  D005               	goto	l150
  1388  00087C                     u830:
  1389                           
  1390                           ; BSR set to: 0
  1391  00087C  0E00               	movlw	0
  1392  00087E  6E31               	movwf	dtoa@p+1,c
  1393  000880  0E01               	movlw	1
  1394  000882  6E30               	movwf	dtoa@p,c
  1395  000884  D004               	goto	l152
  1396  000886                     l150:
  1397                           
  1398                           ; BSR set to: 0
  1399  000886  C068  F030         	movff	_prec,dtoa@p
  1400  00088A  C069  F031         	movff	_prec+1,dtoa@p+1
  1401  00088E                     l152:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1405  00088E  C066  F032         	movff	_width,dtoa@w
  1406  000892  C067  F033         	movff	_width+1,dtoa@w+1
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1410  000896  5034               	movf	dtoa@s,w,c
  1411  000898  1035               	iorwf	dtoa@s+1,w,c
  1412  00089A  A4D8               	btfss	status,2,c
  1413  00089C  D002               	goto	u850
  1414                           
  1415                           ; BSR set to: 0
  1416  00089E  A56A               	btfss	_flags& (0+255),2,b
  1417  0008A0  D003               	goto	l153
  1418  0008A2                     u850:
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1422                           
  1423                           ; BSR set to: 0
  1424  0008A2  0632               	decf	dtoa@w,f,c
  1425  0008A4  A0D8               	btfss	status,0,c
  1426  0008A6  0633               	decf	dtoa@w+1,f,c
  1427  0008A8                     l153:
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1431                           
  1432                           ; BSR set to: 0
  1433  0008A8  0E00               	movlw	0
  1434  0008AA  6E3F               	movwf	dtoa@i+1,c
  1435  0008AC  0E1F               	movlw	31
  1436  0008AE  6E3E               	movwf	dtoa@i,c
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1440  0008B0  0E6D               	movlw	low _dbuf
  1441  0008B2  243E               	addwf	dtoa@i,w,c
  1442  0008B4  6ED9               	movwf	fsr2l,c
  1443  0008B6  0E00               	movlw	high _dbuf
  1444  0008B8  203F               	addwfc	dtoa@i+1,w,c
  1445  0008BA  6EDA               	movwf	fsr2h,c
  1446  0008BC  0E00               	movlw	0
  1447  0008BE  6EDF               	movwf	indf2,c
  1448                           
  1449                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1450  0008C0  D07C               	goto	l156
  1451  0008C2                     
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1453                           
  1454                           ; BSR set to: 0
  1455  0008C2  063E               	decf	dtoa@i,f,c
  1456  0008C4  A0D8               	btfss	status,0,c
  1457  0008C6  063F               	decf	dtoa@i+1,f,c
  1458                           
  1459                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1460  0008C8  0E6D               	movlw	low _dbuf
  1461  0008CA  243E               	addwf	dtoa@i,w,c
  1462  0008CC  6ED9               	movwf	fsr2l,c
  1463  0008CE  0E00               	movlw	high _dbuf
  1464  0008D0  203F               	addwfc	dtoa@i+1,w,c
  1465  0008D2  6EDA               	movwf	fsr2h,c
  1466  0008D4  C036  F001         	movff	dtoa@n,___aomod@dividend
  1467  0008D8  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1468  0008DC  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1469  0008E0  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1470  0008E4  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1471  0008E8  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1472  0008EC  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1473  0008F0  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1474  0008F4  0E0A               	movlw	10
  1475  0008F6  6E09               	movwf	___aomod@divisor,c
  1476  0008F8  0E00               	movlw	0
  1477  0008FA  6E0A               	movwf	___aomod@divisor+1,c
  1478  0008FC  0E00               	movlw	0
  1479  0008FE  6E0B               	movwf	___aomod@divisor+2,c
  1480  000900  0E00               	movlw	0
  1481  000902  6E0C               	movwf	___aomod@divisor+3,c
  1482  000904  0E00               	movlw	0
  1483  000906  6E0D               	movwf	___aomod@divisor+4,c
  1484  000908  0E00               	movlw	0
  1485  00090A  6E0E               	movwf	___aomod@divisor+5,c
  1486  00090C  0E00               	movlw	0
  1487  00090E  6E0F               	movwf	___aomod@divisor+6,c
  1488  000910  0E00               	movlw	0
  1489  000912  6E10               	movwf	___aomod@divisor+7,c
  1490  000914  EC9B  F006         	call	___aomod	;wreg free
  1491  000918  C001  F026         	movff	?___aomod,??_dtoa
  1492  00091C  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1493  000920  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1494  000924  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1495  000928  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1496  00092C  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1497  000930  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1498  000934  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1499  000938  C026  F013         	movff	??_dtoa,abs@a
  1500  00093C  C028  F014         	movff	??_dtoa+2,abs@a+1
  1501  000940  EC16  F009         	call	_abs	;wreg free
  1502  000944  5013               	movf	?_abs,w,c
  1503  000946  0F30               	addlw	48
  1504  000948  6EDF               	movwf	indf2,c
  1505                           
  1506                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1507  00094A  0630               	decf	dtoa@p,f,c
  1508  00094C  A0D8               	btfss	status,0,c
  1509  00094E  0631               	decf	dtoa@p+1,f,c
  1510                           
  1511                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1512  000950  0632               	decf	dtoa@w,f,c
  1513  000952  A0D8               	btfss	status,0,c
  1514  000954  0633               	decf	dtoa@w+1,f,c
  1515                           
  1516                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1517  000956  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1518  00095A  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1519  00095E  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1520  000962  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1521  000966  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1522  00096A  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1523  00096E  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1524  000972  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1525  000976  0E0A               	movlw	10
  1526  000978  6E09               	movwf	___aodiv@divisor,c
  1527  00097A  0E00               	movlw	0
  1528  00097C  6E0A               	movwf	___aodiv@divisor+1,c
  1529  00097E  0E00               	movlw	0
  1530  000980  6E0B               	movwf	___aodiv@divisor+2,c
  1531  000982  0E00               	movlw	0
  1532  000984  6E0C               	movwf	___aodiv@divisor+3,c
  1533  000986  0E00               	movlw	0
  1534  000988  6E0D               	movwf	___aodiv@divisor+4,c
  1535  00098A  0E00               	movlw	0
  1536  00098C  6E0E               	movwf	___aodiv@divisor+5,c
  1537  00098E  0E00               	movlw	0
  1538  000990  6E0F               	movwf	___aodiv@divisor+6,c
  1539  000992  0E00               	movlw	0
  1540  000994  6E10               	movwf	___aodiv@divisor+7,c
  1541  000996  ECF7  F005         	call	___aodiv	;wreg free
  1542  00099A  C001  F036         	movff	?___aodiv,dtoa@n
  1543  00099E  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1544  0009A2  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1545  0009A6  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1546  0009AA  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1547  0009AE  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1548  0009B2  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1549  0009B6  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1550  0009BA                     l156:
  1551                           
  1552                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1553  0009BA  BE3F               	btfsc	dtoa@i+1,7,c
  1554  0009BC  D020               	goto	u900
  1555  0009BE  503F               	movf	dtoa@i+1,w,c
  1556  0009C0  E103               	bnz	u860
  1557  0009C2  043E               	decf	dtoa@i,w,c
  1558  0009C4  A0D8               	btfss	status,0,c
  1559  0009C6  D01B               	goto	u900
  1560  0009C8                     u860:
  1561  0009C8  5036               	movf	dtoa@n,w,c
  1562  0009CA  1037               	iorwf	dtoa@n+1,w,c
  1563  0009CC  1038               	iorwf	dtoa@n+2,w,c
  1564  0009CE  1039               	iorwf	dtoa@n+3,w,c
  1565  0009D0  103A               	iorwf	dtoa@n+4,w,c
  1566  0009D2  103B               	iorwf	dtoa@n+5,w,c
  1567  0009D4  103C               	iorwf	dtoa@n+6,w,c
  1568  0009D6  103D               	iorwf	dtoa@n+7,w,c
  1569  0009D8  A4D8               	btfss	status,2,c
  1570  0009DA  D773               	goto	l157
  1571  0009DC  BE31               	btfsc	dtoa@p+1,7,c
  1572  0009DE  D005               	goto	u880
  1573  0009E0  5031               	movf	dtoa@p+1,w,c
  1574  0009E2  E102               	bnz	u881
  1575  0009E4  0430               	decf	dtoa@p,w,c
  1576  0009E6  B0D8               	btfsc	status,0,c
  1577  0009E8                     u881:
  1578  0009E8  D76C               	goto	l157
  1579  0009EA                     u880:
  1580  0009EA  BE33               	btfsc	dtoa@w+1,7,c
  1581  0009EC  D008               	goto	u900
  1582  0009EE  5033               	movf	dtoa@w+1,w,c
  1583  0009F0  E103               	bnz	u890
  1584  0009F2  0432               	decf	dtoa@w,w,c
  1585  0009F4  A0D8               	btfss	status,0,c
  1586  0009F6  D003               	goto	u900
  1587  0009F8                     u890:
  1588  0009F8  0100               	movlb	0	; () banked
  1589  0009FA  B36A               	btfsc	_flags& (0+255),1,b
  1590  0009FC  D762               	goto	l157
  1591  0009FE                     u900:
  1592                           
  1593                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1594                           
  1595                           ; BSR set to: 0
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600  0009FE  5034               	movf	dtoa@s,w,c
  1601  000A00  1035               	iorwf	dtoa@s+1,w,c
  1602  000A02  A4D8               	btfss	status,2,c
  1603  000A04  D003               	goto	u920
  1604  000A06  0100               	movlb	0	; () banked
  1605  000A08  A56A               	btfss	_flags& (0+255),2,b
  1606  000A0A  D017               	goto	l163
  1607  000A0C                     u920:
  1608                           
  1609                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1610                           
  1611                           ; BSR set to: 0
  1612  000A0C  063E               	decf	dtoa@i,f,c
  1613  000A0E  A0D8               	btfss	status,0,c
  1614  000A10  063F               	decf	dtoa@i+1,f,c
  1615                           
  1616                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1617  000A12  5034               	movf	dtoa@s,w,c
  1618  000A14  1035               	iorwf	dtoa@s+1,w,c
  1619  000A16  A4D8               	btfss	status,2,c
  1620  000A18  D004               	goto	l167
  1621  000A1A  0E00               	movlw	0
  1622  000A1C  6E2F               	movwf	_dtoa$151+1,c
  1623  000A1E  0E2B               	movlw	43
  1624  000A20  D003               	goto	L1
  1625  000A22                     l167:
  1626  000A22  0E00               	movlw	0
  1627  000A24  6E2F               	movwf	_dtoa$151+1,c
  1628  000A26  0E2D               	movlw	45
  1629  000A28                     L1:
  1630  000A28  6E2E               	movwf	_dtoa$151,c
  1631  000A2A  0E6D               	movlw	low _dbuf
  1632  000A2C  243E               	addwf	dtoa@i,w,c
  1633  000A2E  6ED9               	movwf	fsr2l,c
  1634  000A30  0E00               	movlw	high _dbuf
  1635  000A32  203F               	addwfc	dtoa@i+1,w,c
  1636  000A34  6EDA               	movwf	fsr2h,c
  1637  000A36  C02E  FFDF         	movff	_dtoa$151,indf2
  1638  000A3A                     l163:
  1639                           
  1640                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1641  000A3A  C01C  F011         	movff	dtoa@fp,pad@fp
  1642  000A3E  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1643  000A42  0E6D               	movlw	low _dbuf
  1644  000A44  243E               	addwf	dtoa@i,w,c
  1645  000A46  6E13               	movwf	pad@buf,c
  1646  000A48  0E00               	movlw	high _dbuf
  1647  000A4A  203F               	addwfc	dtoa@i+1,w,c
  1648  000A4C  6E14               	movwf	pad@buf+1,c
  1649  000A4E  C032  F015         	movff	dtoa@w,pad@p
  1650  000A52  C033  F016         	movff	dtoa@w+1,pad@p+1
  1651  000A56  ECD9  F007         	call	_pad	;wreg free
  1652  000A5A  C011  F01C         	movff	?_pad,?_dtoa
  1653  000A5E  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1654  000A62  0012               	return	
  1655  000A64                     __end_of_dtoa:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           postinc0	equ	0xFEE
  1662                           wreg	equ	0xFE8
  1663                           indf2	equ	0xFDF
  1664                           postinc2	equ	0xFDE
  1665                           postdec2	equ	0xFDD
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _pad *****************
  1671 ;; Defined at:
  1672 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1675 ;;		 -> sprintf@f(6), 
  1676 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1677 ;;		 -> dbuf(32), 
  1678 ;;  p               2   20[COMRAM] int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  w               2   25[COMRAM] int 
  1681 ;;  i               2   23[COMRAM] int 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  2   16[COMRAM] int 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1691 ;;      Params:         6       0       0       0       0       0       0       0       0
  1692 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1693 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1694 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1695 ;;Total ram usage:       11 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    4
  1698 ;; This function calls:
  1699 ;;		_fputc
  1700 ;;		_fputs
  1701 ;;		_strlen
  1702 ;; This function is called by:
  1703 ;;		_dtoa
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707                           	psect	text7
  1708  000FB2                     __ptext7:
  1709                           	opt stack 0
  1710  000FB2                     _pad:
  1711                           	opt stack 21
  1712                           
  1713                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1714                           
  1715                           ;incstack = 0
  1716  000FB2  0100               	movlb	0	; () banked
  1717  000FB4  A16A               	btfss	_flags& (0+255),0,b
  1718  000FB6  D00A               	goto	l135
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1722  000FB8  C013  F00A         	movff	pad@buf,fputs@s
  1723  000FBC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1724  000FC0  C011  F00C         	movff	pad@fp,fputs@fp
  1725  000FC4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1726  000FC8  ECFA  F008         	call	_fputs	;wreg free
  1727  000FCC                     l135:
  1728                           
  1729                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1730  000FCC  BE16               	btfsc	pad@p+1,7,c
  1731  000FCE  D005               	goto	l137
  1732  000FD0  C015  F01A         	movff	pad@p,pad@w
  1733  000FD4  C016  F01B         	movff	pad@p+1,pad@w+1
  1734  000FD8  D004               	goto	l139
  1735  000FDA                     l137:
  1736  000FDA  0E00               	movlw	0
  1737  000FDC  6E1B               	movwf	pad@w+1,c
  1738  000FDE  0E00               	movlw	0
  1739  000FE0  6E1A               	movwf	pad@w,c
  1740  000FE2                     l139:
  1741                           
  1742                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1743  000FE2  0E00               	movlw	0
  1744  000FE4  6E19               	movwf	pad@i+1,c
  1745  000FE6  0E00               	movlw	0
  1746  000FE8  6E18               	movwf	pad@i,c
  1747                           
  1748                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1749  000FEA  D00C               	goto	l140
  1750  000FEC                     
  1751                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1752  000FEC  0E00               	movlw	0
  1753  000FEE  6E02               	movwf	fputc@c+1,c
  1754  000FF0  0E20               	movlw	32
  1755  000FF2  6E01               	movwf	fputc@c,c
  1756  000FF4  C011  F003         	movff	pad@fp,fputc@fp
  1757  000FF8  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1758  000FFC  EC89  F007         	call	_fputc	;wreg free
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1761  001000  4A18               	infsnz	pad@i,f,c
  1762  001002  2A19               	incf	pad@i+1,f,c
  1763  001004                     l140:
  1764                           
  1765                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1766  001004  501A               	movf	pad@w,w,c
  1767  001006  5C18               	subwf	pad@i,w,c
  1768  001008  5019               	movf	pad@i+1,w,c
  1769  00100A  0A80               	xorlw	128
  1770  00100C  6E17               	movwf	??_pad& (0+255),c
  1771  00100E  501B               	movf	pad@w+1,w,c
  1772  001010  0A80               	xorlw	128
  1773  001012  5817               	subwfb	??_pad& (0+255),w,c
  1774  001014  A0D8               	btfss	status,0,c
  1775  001016  D7EA               	goto	l141
  1776                           
  1777                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1778  001018  0100               	movlb	0	; () banked
  1779  00101A  B16A               	btfsc	_flags& (0+255),0,b
  1780  00101C  D00A               	goto	l143
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1784  00101E  C013  F00A         	movff	pad@buf,fputs@s
  1785  001022  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1786  001026  C011  F00C         	movff	pad@fp,fputs@fp
  1787  00102A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1788  00102E  ECFA  F008         	call	_fputs	;wreg free
  1789  001032                     l143:
  1790                           
  1791                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1792  001032  C013  F001         	movff	pad@buf,strlen@s
  1793  001036  C014  F002         	movff	pad@buf+1,strlen@s+1
  1794  00103A  ECDD  F008         	call	_strlen	;wreg free
  1795  00103E  501A               	movf	pad@w,w,c
  1796  001040  2401               	addwf	?_strlen,w,c
  1797  001042  6E11               	movwf	?_pad,c
  1798  001044  501B               	movf	pad@w+1,w,c
  1799  001046  2002               	addwfc	?_strlen+1,w,c
  1800  001048  6E12               	movwf	?_pad+1,c
  1801  00104A  0012               	return	
  1802  00104C                     __end_of_pad:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           indf2	equ	0xFDF
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _strlen *****************
  1818 ;; Defined at:
  1819 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strlen.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1822 ;;		 -> dbuf(32), 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1825 ;;		 -> dbuf(32), 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  2    0[COMRAM] unsigned int 
  1828 ;; Registers used:
  1829 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1835 ;;      Params:         2       0       0       0       0       0       0       0       0
  1836 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1837 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1838 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1839 ;;Total ram usage:        6 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_pad
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text8
  1850  0011BA                     __ptext8:
  1851                           	opt stack 0
  1852  0011BA                     _strlen:
  1853                           	opt stack 23
  1854                           
  1855                           ;incstack = 0
  1856  0011BA  C001  F005         	movff	strlen@s,strlen@a
  1857  0011BE  C002  F006         	movff	strlen@s+1,strlen@a+1
  1858  0011C2  D002               	goto	l898
  1859  0011C4  4A01               	infsnz	strlen@s,f,c
  1860  0011C6  2A02               	incf	strlen@s+1,f,c
  1861  0011C8                     l898:
  1862  0011C8  C001  FFD9         	movff	strlen@s,fsr2l
  1863  0011CC  C002  FFDA         	movff	strlen@s+1,fsr2h
  1864  0011D0  50DF               	movf	indf2,w,c
  1865  0011D2  A4D8               	btfss	status,2,c
  1866  0011D4  D7F7               	goto	l899
  1867  0011D6  C005  F003         	movff	strlen@a,??_strlen
  1868  0011DA  C006  F004         	movff	strlen@a+1,??_strlen+1
  1869  0011DE  1E03               	comf	??_strlen,f,c
  1870  0011E0  1E04               	comf	??_strlen+1,f,c
  1871  0011E2  4A03               	infsnz	??_strlen,f,c
  1872  0011E4  2A04               	incf	??_strlen+1,f,c
  1873  0011E6  5001               	movf	strlen@s,w,c
  1874  0011E8  2403               	addwf	??_strlen,w,c
  1875  0011EA  6E01               	movwf	?_strlen,c
  1876  0011EC  5002               	movf	strlen@s+1,w,c
  1877  0011EE  2004               	addwfc	??_strlen+1,w,c
  1878  0011F0  6E02               	movwf	?_strlen+1,c
  1879  0011F2  0012               	return	
  1880  0011F4                     __end_of_strlen:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           indf2	equ	0xFDF
  1889                           postinc2	equ	0xFDE
  1890                           postdec2	equ	0xFDD
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _fputs *****************
  1896 ;; Defined at:
  1897 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputs.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1900 ;;		 -> dbuf(32), 
  1901 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1902 ;;		 -> sprintf@f(6), 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  i               2   14[COMRAM] int 
  1905 ;;  c               1   13[COMRAM] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  2    9[COMRAM] int 
  1908 ;; Registers used:
  1909 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1915 ;;      Params:         4       0       0       0       0       0       0       0       0
  1916 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1918 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        7 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    3
  1922 ;; This function calls:
  1923 ;;		_fputc
  1924 ;; This function is called by:
  1925 ;;		_pad
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text9
  1930  0011F4                     __ptext9:
  1931                           	opt stack 0
  1932  0011F4                     _fputs:
  1933                           	opt stack 21
  1934                           
  1935                           ;incstack = 0
  1936  0011F4  0E00               	movlw	0
  1937  0011F6  6E10               	movwf	fputs@i+1,c
  1938  0011F8  0E00               	movlw	0
  1939  0011FA  6E0F               	movwf	fputs@i,c
  1940  0011FC  D00B               	goto	l882
  1941  0011FE  C00E  F001         	movff	fputs@c,fputc@c
  1942  001202  6A02               	clrf	fputc@c+1,c
  1943  001204  C00C  F003         	movff	fputs@fp,fputc@fp
  1944  001208  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1945  00120C  EC89  F007         	call	_fputc	;wreg free
  1946  001210  4A0F               	infsnz	fputs@i,f,c
  1947  001212  2A10               	incf	fputs@i+1,f,c
  1948  001214                     l882:
  1949  001214  500F               	movf	fputs@i,w,c
  1950  001216  240A               	addwf	fputs@s,w,c
  1951  001218  6ED9               	movwf	fsr2l,c
  1952  00121A  5010               	movf	fputs@i+1,w,c
  1953  00121C  200B               	addwfc	fputs@s+1,w,c
  1954  00121E  6EDA               	movwf	fsr2h,c
  1955  001220  50DF               	movf	indf2,w,c
  1956  001222  6E0E               	movwf	fputs@c,c
  1957  001224  500E               	movf	fputs@c,w,c
  1958  001226  B4D8               	btfsc	status,2,c
  1959  001228  0012               	return	
  1960  00122A  D7E9               	goto	l883
  1961  00122C                     __end_of_fputs:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           indf2	equ	0xFDF
  1970                           postinc2	equ	0xFDE
  1971                           postdec2	equ	0xFDD
  1972                           fsr2h	equ	0xFDA
  1973                           fsr2l	equ	0xFD9
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _fputc *****************
  1977 ;; Defined at:
  1978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputc.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  c               2    0[COMRAM] int 
  1981 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1982 ;;		 -> sprintf@f(6), 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  2    0[COMRAM] int 
  1987 ;; Registers used:
  1988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1994 ;;      Params:         4       0       0       0       0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1996 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1997 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1998 ;;Total ram usage:        9 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    2
  2001 ;; This function calls:
  2002 ;;		_putch
  2003 ;; This function is called by:
  2004 ;;		_pad
  2005 ;;		_vfpfcnvrt
  2006 ;;		_fputs
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text10
  2011  000F12                     __ptext10:
  2012                           	opt stack 0
  2013  000F12                     _fputc:
  2014                           	opt stack 24
  2015                           
  2016                           ;incstack = 0
  2017  000F12  5003               	movf	fputc@fp,w,c
  2018  000F14  1004               	iorwf	fputc@fp+1,w,c
  2019  000F16  B4D8               	btfsc	status,2,c
  2020  000F18  D004               	goto	u560
  2021  000F1A  5003               	movf	fputc@fp,w,c
  2022  000F1C  1004               	iorwf	fputc@fp+1,w,c
  2023  000F1E  A4D8               	btfss	status,2,c
  2024  000F20  D004               	goto	l870
  2025  000F22                     u560:
  2026  000F22  5001               	movf	fputc@c,w,c
  2027  000F24  EC61  F009         	call	_putch
  2028  000F28  0012               	return	
  2029  000F2A                     l870:
  2030  000F2A  EE20 F004          	lfsr	2,4
  2031  000F2E  5003               	movf	fputc@fp,w,c
  2032  000F30  26D9               	addwf	fsr2l,f,c
  2033  000F32  5004               	movf	fputc@fp+1,w,c
  2034  000F34  22DA               	addwfc	fsr2h,f,c
  2035  000F36  50DE               	movf	postinc2,w,c
  2036  000F38  10DE               	iorwf	postinc2,w,c
  2037  000F3A  B4D8               	btfsc	status,2,c
  2038  000F3C  D016               	goto	u580
  2039  000F3E  EE20 F004          	lfsr	2,4
  2040  000F42  5003               	movf	fputc@fp,w,c
  2041  000F44  26D9               	addwf	fsr2l,f,c
  2042  000F46  5004               	movf	fputc@fp+1,w,c
  2043  000F48  22DA               	addwfc	fsr2h,f,c
  2044  000F4A  EE10 F002          	lfsr	1,2
  2045  000F4E  5003               	movf	fputc@fp,w,c
  2046  000F50  26E1               	addwf	fsr1l,f,c
  2047  000F52  5004               	movf	fputc@fp+1,w,c
  2048  000F54  22E2               	addwfc	fsr1h,f,c
  2049  000F56  50DE               	movf	postinc2,w,c
  2050  000F58  5CE6               	subwf	postinc1,w,c
  2051  000F5A  50E6               	movf	postinc1,w,c
  2052  000F5C  0A80               	xorlw	128
  2053  000F5E  6E09               	movwf	(??_fputc+4)& (0+255),c
  2054  000F60  50DE               	movf	postinc2,w,c
  2055  000F62  0A80               	xorlw	128
  2056  000F64  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  2057  000F66  B0D8               	btfsc	status,0,c
  2058  000F68  0012               	return	
  2059  000F6A                     u580:
  2060  000F6A  EE20 F002          	lfsr	2,2
  2061  000F6E  5003               	movf	fputc@fp,w,c
  2062  000F70  26D9               	addwf	fsr2l,f,c
  2063  000F72  5004               	movf	fputc@fp+1,w,c
  2064  000F74  22DA               	addwfc	fsr2h,f,c
  2065  000F76  CFDE F005          	movff	postinc2,??_fputc
  2066  000F7A  CFDD F006          	movff	postdec2,??_fputc+1
  2067  000F7E  C003  FFD9         	movff	fputc@fp,fsr2l
  2068  000F82  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2069  000F86  CFDE F007          	movff	postinc2,??_fputc+2
  2070  000F8A  CFDD F008          	movff	postdec2,??_fputc+3
  2071  000F8E  5005               	movf	??_fputc,w,c
  2072  000F90  2407               	addwf	??_fputc+2,w,c
  2073  000F92  6ED9               	movwf	fsr2l,c
  2074  000F94  5006               	movf	??_fputc+1,w,c
  2075  000F96  2008               	addwfc	??_fputc+3,w,c
  2076  000F98  6EDA               	movwf	fsr2h,c
  2077  000F9A  C001  FFDF         	movff	fputc@c,indf2
  2078  000F9E  EE20 F002          	lfsr	2,2
  2079  000FA2  5003               	movf	fputc@fp,w,c
  2080  000FA4  26D9               	addwf	fsr2l,f,c
  2081  000FA6  5004               	movf	fputc@fp+1,w,c
  2082  000FA8  22DA               	addwfc	fsr2h,f,c
  2083  000FAA  2ADE               	incf	postinc2,f,c
  2084  000FAC  0E00               	movlw	0
  2085  000FAE  22DD               	addwfc	postdec2,f,c
  2086  000FB0  0012               	return	
  2087  000FB2                     __end_of_fputc:
  2088                           	opt stack 0
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           postinc0	equ	0xFEE
  2094                           wreg	equ	0xFE8
  2095                           postinc1	equ	0xFE6
  2096                           fsr1h	equ	0xFE2
  2097                           fsr1l	equ	0xFE1
  2098                           indf2	equ	0xFDF
  2099                           postinc2	equ	0xFDE
  2100                           postdec2	equ	0xFDD
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _putch *****************
  2106 ;; Defined at:
  2107 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\putch.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  c               1    wreg     unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  c               1    0[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2121 ;;      Params:         0       0       0       0       0       0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2124 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2125 ;;Total ram usage:        0 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    1
  2128 ;; This function calls:
  2129 ;;		Nothing
  2130 ;; This function is called by:
  2131 ;;		_fputc
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text11
  2136  0012C2                     __ptext11:
  2137                           	opt stack 0
  2138  0012C2                     _putch:
  2139                           	opt stack 24
  2140                           
  2141                           ;incstack = 0
  2142  0012C2  0012               	return		;funcret
  2143  0012C4                     __end_of_putch:
  2144                           	opt stack 0
  2145                           tblptru	equ	0xFF8
  2146                           tblptrh	equ	0xFF7
  2147                           tblptrl	equ	0xFF6
  2148                           tablat	equ	0xFF5
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           postinc1	equ	0xFE6
  2152                           fsr1h	equ	0xFE2
  2153                           fsr1l	equ	0xFE1
  2154                           indf2	equ	0xFDF
  2155                           postinc2	equ	0xFDE
  2156                           postdec2	equ	0xFDD
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _abs *****************
  2162 ;; Defined at:
  2163 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\abs.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  a               2   18[COMRAM] int 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  2   18[COMRAM] int 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         2       0       0       0       0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2179 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2180 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2181 ;;Total ram usage:        4 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    1
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_dtoa
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text12
  2192  00122C                     __ptext12:
  2193                           	opt stack 0
  2194  00122C                     _abs:
  2195                           	opt stack 24
  2196                           
  2197                           ;incstack = 0
  2198  00122C  BE14               	btfsc	abs@a+1,7,c
  2199  00122E  D005               	goto	u650
  2200  001230  5014               	movf	abs@a+1,w,c
  2201  001232  E110               	bnz	l862
  2202  001234  0413               	decf	abs@a,w,c
  2203  001236  B0D8               	btfsc	status,0,c
  2204  001238  D00D               	goto	l862
  2205  00123A                     u650:
  2206  00123A  C013  F015         	movff	abs@a,??_abs
  2207  00123E  C014  F016         	movff	abs@a+1,??_abs+1
  2208  001242  1E15               	comf	??_abs,f,c
  2209  001244  1E16               	comf	??_abs+1,f,c
  2210  001246  4A15               	infsnz	??_abs,f,c
  2211  001248  2A16               	incf	??_abs+1,f,c
  2212  00124A  C015  F013         	movff	??_abs,?_abs
  2213  00124E  C016  F014         	movff	??_abs+1,?_abs+1
  2214  001252  0012               	return	
  2215  001254                     l862:
  2216  001254  C013  F013         	movff	abs@a,?_abs
  2217  001258  C014  F014         	movff	abs@a+1,?_abs+1
  2218  00125C  0012               	return	
  2219  00125E                     __end_of_abs:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postinc1	equ	0xFE6
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function ___aomod *****************
  2238 ;; Defined at:
  2239 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aomod.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  dividend        8    0[COMRAM] long long 
  2242 ;;  divisor         8    8[COMRAM] long long 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  sign            1   17[COMRAM] unsigned char 
  2245 ;;  counter         1   16[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  8    0[COMRAM] long long 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2255 ;;      Params:        16       0       0       0       0       0       0       0       0
  2256 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2258 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2259 ;;Total ram usage:       18 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    1
  2262 ;; This function calls:
  2263 ;;		Nothing
  2264 ;; This function is called by:
  2265 ;;		_dtoa
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text13
  2270  000D36                     __ptext13:
  2271                           	opt stack 0
  2272  000D36                     ___aomod:
  2273                           	opt stack 24
  2274                           
  2275                           ;incstack = 0
  2276  000D36  0E00               	movlw	0
  2277  000D38  6E12               	movwf	___aomod@sign,c
  2278  000D3A  AE08               	btfss	___aomod@dividend+7,7,c
  2279  000D3C  D012               	goto	l304
  2280  000D3E  1E08               	comf	___aomod@dividend+7,f,c
  2281  000D40  1E07               	comf	___aomod@dividend+6,f,c
  2282  000D42  1E06               	comf	___aomod@dividend+5,f,c
  2283  000D44  1E05               	comf	___aomod@dividend+4,f,c
  2284  000D46  1E04               	comf	___aomod@dividend+3,f,c
  2285  000D48  1E03               	comf	___aomod@dividend+2,f,c
  2286  000D4A  1E02               	comf	___aomod@dividend+1,f,c
  2287  000D4C  6C01               	negf	___aomod@dividend,c
  2288  000D4E  0E00               	movlw	0
  2289  000D50  2202               	addwfc	___aomod@dividend+1,f,c
  2290  000D52  2203               	addwfc	___aomod@dividend+2,f,c
  2291  000D54  2204               	addwfc	___aomod@dividend+3,f,c
  2292  000D56  2205               	addwfc	___aomod@dividend+4,f,c
  2293  000D58  2206               	addwfc	___aomod@dividend+5,f,c
  2294  000D5A  2207               	addwfc	___aomod@dividend+6,f,c
  2295  000D5C  2208               	addwfc	___aomod@dividend+7,f,c
  2296  000D5E  0E01               	movlw	1
  2297  000D60  6E12               	movwf	___aomod@sign,c
  2298  000D62                     l304:
  2299  000D62  AE10               	btfss	___aomod@divisor+7,7,c
  2300  000D64  D010               	goto	l305
  2301  000D66  1E10               	comf	___aomod@divisor+7,f,c
  2302  000D68  1E0F               	comf	___aomod@divisor+6,f,c
  2303  000D6A  1E0E               	comf	___aomod@divisor+5,f,c
  2304  000D6C  1E0D               	comf	___aomod@divisor+4,f,c
  2305  000D6E  1E0C               	comf	___aomod@divisor+3,f,c
  2306  000D70  1E0B               	comf	___aomod@divisor+2,f,c
  2307  000D72  1E0A               	comf	___aomod@divisor+1,f,c
  2308  000D74  6C09               	negf	___aomod@divisor,c
  2309  000D76  0E00               	movlw	0
  2310  000D78  220A               	addwfc	___aomod@divisor+1,f,c
  2311  000D7A  220B               	addwfc	___aomod@divisor+2,f,c
  2312  000D7C  220C               	addwfc	___aomod@divisor+3,f,c
  2313  000D7E  220D               	addwfc	___aomod@divisor+4,f,c
  2314  000D80  220E               	addwfc	___aomod@divisor+5,f,c
  2315  000D82  220F               	addwfc	___aomod@divisor+6,f,c
  2316  000D84  2210               	addwfc	___aomod@divisor+7,f,c
  2317  000D86                     l305:
  2318  000D86  5009               	movf	___aomod@divisor,w,c
  2319  000D88  100A               	iorwf	___aomod@divisor+1,w,c
  2320  000D8A  100B               	iorwf	___aomod@divisor+2,w,c
  2321  000D8C  100C               	iorwf	___aomod@divisor+3,w,c
  2322  000D8E  100D               	iorwf	___aomod@divisor+4,w,c
  2323  000D90  100E               	iorwf	___aomod@divisor+5,w,c
  2324  000D92  100F               	iorwf	___aomod@divisor+6,w,c
  2325  000D94  1010               	iorwf	___aomod@divisor+7,w,c
  2326  000D96  B4D8               	btfsc	status,2,c
  2327  000D98  D03C               	goto	l312
  2328  000D9A  0E01               	movlw	1
  2329  000D9C  6E11               	movwf	___aomod@counter,c
  2330  000D9E  D00A               	goto	l307
  2331  000DA0  90D8               	bcf	status,0,c
  2332  000DA2  3609               	rlcf	___aomod@divisor,f,c
  2333  000DA4  360A               	rlcf	___aomod@divisor+1,f,c
  2334  000DA6  360B               	rlcf	___aomod@divisor+2,f,c
  2335  000DA8  360C               	rlcf	___aomod@divisor+3,f,c
  2336  000DAA  360D               	rlcf	___aomod@divisor+4,f,c
  2337  000DAC  360E               	rlcf	___aomod@divisor+5,f,c
  2338  000DAE  360F               	rlcf	___aomod@divisor+6,f,c
  2339  000DB0  3610               	rlcf	___aomod@divisor+7,f,c
  2340  000DB2  2A11               	incf	___aomod@counter,f,c
  2341  000DB4                     l307:
  2342  000DB4  AE10               	btfss	___aomod@divisor+7,7,c
  2343  000DB6  D7F4               	goto	l308
  2344  000DB8                     u760:
  2345  000DB8  5009               	movf	___aomod@divisor,w,c
  2346  000DBA  5C01               	subwf	___aomod@dividend,w,c
  2347  000DBC  500A               	movf	___aomod@divisor+1,w,c
  2348  000DBE  5802               	subwfb	___aomod@dividend+1,w,c
  2349  000DC0  500B               	movf	___aomod@divisor+2,w,c
  2350  000DC2  5803               	subwfb	___aomod@dividend+2,w,c
  2351  000DC4  500C               	movf	___aomod@divisor+3,w,c
  2352  000DC6  5804               	subwfb	___aomod@dividend+3,w,c
  2353  000DC8  500D               	movf	___aomod@divisor+4,w,c
  2354  000DCA  5805               	subwfb	___aomod@dividend+4,w,c
  2355  000DCC  500E               	movf	___aomod@divisor+5,w,c
  2356  000DCE  5806               	subwfb	___aomod@dividend+5,w,c
  2357  000DD0  500F               	movf	___aomod@divisor+6,w,c
  2358  000DD2  5807               	subwfb	___aomod@dividend+6,w,c
  2359  000DD4  5010               	movf	___aomod@divisor+7,w,c
  2360  000DD6  5808               	subwfb	___aomod@dividend+7,w,c
  2361  000DD8  A0D8               	btfss	status,0,c
  2362  000DDA  D010               	goto	l311
  2363  000DDC  5009               	movf	___aomod@divisor,w,c
  2364  000DDE  5E01               	subwf	___aomod@dividend,f,c
  2365  000DE0  500A               	movf	___aomod@divisor+1,w,c
  2366  000DE2  5A02               	subwfb	___aomod@dividend+1,f,c
  2367  000DE4  500B               	movf	___aomod@divisor+2,w,c
  2368  000DE6  5A03               	subwfb	___aomod@dividend+2,f,c
  2369  000DE8  500C               	movf	___aomod@divisor+3,w,c
  2370  000DEA  5A04               	subwfb	___aomod@dividend+3,f,c
  2371  000DEC  500D               	movf	___aomod@divisor+4,w,c
  2372  000DEE  5A05               	subwfb	___aomod@dividend+4,f,c
  2373  000DF0  500E               	movf	___aomod@divisor+5,w,c
  2374  000DF2  5A06               	subwfb	___aomod@dividend+5,f,c
  2375  000DF4  500F               	movf	___aomod@divisor+6,w,c
  2376  000DF6  5A07               	subwfb	___aomod@dividend+6,f,c
  2377  000DF8  5010               	movf	___aomod@divisor+7,w,c
  2378  000DFA  5A08               	subwfb	___aomod@dividend+7,f,c
  2379  000DFC                     l311:
  2380  000DFC  90D8               	bcf	status,0,c
  2381  000DFE  3210               	rrcf	___aomod@divisor+7,f,c
  2382  000E00  320F               	rrcf	___aomod@divisor+6,f,c
  2383  000E02  320E               	rrcf	___aomod@divisor+5,f,c
  2384  000E04  320D               	rrcf	___aomod@divisor+4,f,c
  2385  000E06  320C               	rrcf	___aomod@divisor+3,f,c
  2386  000E08  320B               	rrcf	___aomod@divisor+2,f,c
  2387  000E0A  320A               	rrcf	___aomod@divisor+1,f,c
  2388  000E0C  3209               	rrcf	___aomod@divisor,f,c
  2389  000E0E  2E11               	decfsz	___aomod@counter,f,c
  2390  000E10  D7D3               	goto	u760
  2391  000E12                     l312:
  2392  000E12  5012               	movf	___aomod@sign,w,c
  2393  000E14  B4D8               	btfsc	status,2,c
  2394  000E16  D010               	goto	l313
  2395  000E18  1E08               	comf	___aomod@dividend+7,f,c
  2396  000E1A  1E07               	comf	___aomod@dividend+6,f,c
  2397  000E1C  1E06               	comf	___aomod@dividend+5,f,c
  2398  000E1E  1E05               	comf	___aomod@dividend+4,f,c
  2399  000E20  1E04               	comf	___aomod@dividend+3,f,c
  2400  000E22  1E03               	comf	___aomod@dividend+2,f,c
  2401  000E24  1E02               	comf	___aomod@dividend+1,f,c
  2402  000E26  6C01               	negf	___aomod@dividend,c
  2403  000E28  0E00               	movlw	0
  2404  000E2A  2202               	addwfc	___aomod@dividend+1,f,c
  2405  000E2C  2203               	addwfc	___aomod@dividend+2,f,c
  2406  000E2E  2204               	addwfc	___aomod@dividend+3,f,c
  2407  000E30  2205               	addwfc	___aomod@dividend+4,f,c
  2408  000E32  2206               	addwfc	___aomod@dividend+5,f,c
  2409  000E34  2207               	addwfc	___aomod@dividend+6,f,c
  2410  000E36  2208               	addwfc	___aomod@dividend+7,f,c
  2411  000E38                     l313:
  2412  000E38  C001  F001         	movff	___aomod@dividend,?___aomod
  2413  000E3C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2414  000E40  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2415  000E44  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2416  000E48  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2417  000E4C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2418  000E50  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2419  000E54  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2420  000E58  0012               	return	
  2421  000E5A                     __end_of___aomod:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           postinc1	equ	0xFE6
  2430                           fsr1h	equ	0xFE2
  2431                           fsr1l	equ	0xFE1
  2432                           indf2	equ	0xFDF
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function ___aodiv *****************
  2440 ;; Defined at:
  2441 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aodiv.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  dividend        8    0[COMRAM] long long 
  2444 ;;  divisor         8    8[COMRAM] long long 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  quotient        8   18[COMRAM] long long 
  2447 ;;  sign            1   17[COMRAM] unsigned char 
  2448 ;;  counter         1   16[COMRAM] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  8    0[COMRAM] long long 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2458 ;;      Params:        16       0       0       0       0       0       0       0       0
  2459 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2461 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2462 ;;Total ram usage:       26 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    1
  2465 ;; This function calls:
  2466 ;;		Nothing
  2467 ;; This function is called by:
  2468 ;;		_dtoa
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text14
  2473  000BEE                     __ptext14:
  2474                           	opt stack 0
  2475  000BEE                     ___aodiv:
  2476                           	opt stack 24
  2477                           
  2478                           ;incstack = 0
  2479  000BEE  0E00               	movlw	0
  2480  000BF0  6E12               	movwf	___aodiv@sign,c
  2481  000BF2  AE10               	btfss	___aodiv@divisor+7,7,c
  2482  000BF4  D012               	goto	l291
  2483  000BF6  1E10               	comf	___aodiv@divisor+7,f,c
  2484  000BF8  1E0F               	comf	___aodiv@divisor+6,f,c
  2485  000BFA  1E0E               	comf	___aodiv@divisor+5,f,c
  2486  000BFC  1E0D               	comf	___aodiv@divisor+4,f,c
  2487  000BFE  1E0C               	comf	___aodiv@divisor+3,f,c
  2488  000C00  1E0B               	comf	___aodiv@divisor+2,f,c
  2489  000C02  1E0A               	comf	___aodiv@divisor+1,f,c
  2490  000C04  6C09               	negf	___aodiv@divisor,c
  2491  000C06  0E00               	movlw	0
  2492  000C08  220A               	addwfc	___aodiv@divisor+1,f,c
  2493  000C0A  220B               	addwfc	___aodiv@divisor+2,f,c
  2494  000C0C  220C               	addwfc	___aodiv@divisor+3,f,c
  2495  000C0E  220D               	addwfc	___aodiv@divisor+4,f,c
  2496  000C10  220E               	addwfc	___aodiv@divisor+5,f,c
  2497  000C12  220F               	addwfc	___aodiv@divisor+6,f,c
  2498  000C14  2210               	addwfc	___aodiv@divisor+7,f,c
  2499  000C16  0E01               	movlw	1
  2500  000C18  6E12               	movwf	___aodiv@sign,c
  2501  000C1A                     l291:
  2502  000C1A  AE08               	btfss	___aodiv@dividend+7,7,c
  2503  000C1C  D012               	goto	l292
  2504  000C1E  1E08               	comf	___aodiv@dividend+7,f,c
  2505  000C20  1E07               	comf	___aodiv@dividend+6,f,c
  2506  000C22  1E06               	comf	___aodiv@dividend+5,f,c
  2507  000C24  1E05               	comf	___aodiv@dividend+4,f,c
  2508  000C26  1E04               	comf	___aodiv@dividend+3,f,c
  2509  000C28  1E03               	comf	___aodiv@dividend+2,f,c
  2510  000C2A  1E02               	comf	___aodiv@dividend+1,f,c
  2511  000C2C  6C01               	negf	___aodiv@dividend,c
  2512  000C2E  0E00               	movlw	0
  2513  000C30  2202               	addwfc	___aodiv@dividend+1,f,c
  2514  000C32  2203               	addwfc	___aodiv@dividend+2,f,c
  2515  000C34  2204               	addwfc	___aodiv@dividend+3,f,c
  2516  000C36  2205               	addwfc	___aodiv@dividend+4,f,c
  2517  000C38  2206               	addwfc	___aodiv@dividend+5,f,c
  2518  000C3A  2207               	addwfc	___aodiv@dividend+6,f,c
  2519  000C3C  2208               	addwfc	___aodiv@dividend+7,f,c
  2520  000C3E  0E01               	movlw	1
  2521  000C40  1A12               	xorwf	___aodiv@sign,f,c
  2522  000C42                     l292:
  2523  000C42  EE20  F013         	lfsr	2,___aodiv@quotient
  2524  000C46  0E07               	movlw	7
  2525  000C48                     u681:
  2526  000C48  6ADE               	clrf	postinc2,c
  2527  000C4A  06E8               	decf	wreg,f,c
  2528  000C4C  E2FD               	bc	u681
  2529  000C4E  5009               	movf	___aodiv@divisor,w,c
  2530  000C50  100A               	iorwf	___aodiv@divisor+1,w,c
  2531  000C52  100B               	iorwf	___aodiv@divisor+2,w,c
  2532  000C54  100C               	iorwf	___aodiv@divisor+3,w,c
  2533  000C56  100D               	iorwf	___aodiv@divisor+4,w,c
  2534  000C58  100E               	iorwf	___aodiv@divisor+5,w,c
  2535  000C5A  100F               	iorwf	___aodiv@divisor+6,w,c
  2536  000C5C  1010               	iorwf	___aodiv@divisor+7,w,c
  2537  000C5E  B4D8               	btfsc	status,2,c
  2538  000C60  D046               	goto	l299
  2539  000C62  0E01               	movlw	1
  2540  000C64  6E11               	movwf	___aodiv@counter,c
  2541  000C66  D00A               	goto	l294
  2542  000C68  90D8               	bcf	status,0,c
  2543  000C6A  3609               	rlcf	___aodiv@divisor,f,c
  2544  000C6C  360A               	rlcf	___aodiv@divisor+1,f,c
  2545  000C6E  360B               	rlcf	___aodiv@divisor+2,f,c
  2546  000C70  360C               	rlcf	___aodiv@divisor+3,f,c
  2547  000C72  360D               	rlcf	___aodiv@divisor+4,f,c
  2548  000C74  360E               	rlcf	___aodiv@divisor+5,f,c
  2549  000C76  360F               	rlcf	___aodiv@divisor+6,f,c
  2550  000C78  3610               	rlcf	___aodiv@divisor+7,f,c
  2551  000C7A  2A11               	incf	___aodiv@counter,f,c
  2552  000C7C                     l294:
  2553  000C7C  AE10               	btfss	___aodiv@divisor+7,7,c
  2554  000C7E  D7F4               	goto	l295
  2555  000C80                     u700:
  2556  000C80  90D8               	bcf	status,0,c
  2557  000C82  3613               	rlcf	___aodiv@quotient,f,c
  2558  000C84  3614               	rlcf	___aodiv@quotient+1,f,c
  2559  000C86  3615               	rlcf	___aodiv@quotient+2,f,c
  2560  000C88  3616               	rlcf	___aodiv@quotient+3,f,c
  2561  000C8A  3617               	rlcf	___aodiv@quotient+4,f,c
  2562  000C8C  3618               	rlcf	___aodiv@quotient+5,f,c
  2563  000C8E  3619               	rlcf	___aodiv@quotient+6,f,c
  2564  000C90  361A               	rlcf	___aodiv@quotient+7,f,c
  2565  000C92  5009               	movf	___aodiv@divisor,w,c
  2566  000C94  5C01               	subwf	___aodiv@dividend,w,c
  2567  000C96  500A               	movf	___aodiv@divisor+1,w,c
  2568  000C98  5802               	subwfb	___aodiv@dividend+1,w,c
  2569  000C9A  500B               	movf	___aodiv@divisor+2,w,c
  2570  000C9C  5803               	subwfb	___aodiv@dividend+2,w,c
  2571  000C9E  500C               	movf	___aodiv@divisor+3,w,c
  2572  000CA0  5804               	subwfb	___aodiv@dividend+3,w,c
  2573  000CA2  500D               	movf	___aodiv@divisor+4,w,c
  2574  000CA4  5805               	subwfb	___aodiv@dividend+4,w,c
  2575  000CA6  500E               	movf	___aodiv@divisor+5,w,c
  2576  000CA8  5806               	subwfb	___aodiv@dividend+5,w,c
  2577  000CAA  500F               	movf	___aodiv@divisor+6,w,c
  2578  000CAC  5807               	subwfb	___aodiv@dividend+6,w,c
  2579  000CAE  5010               	movf	___aodiv@divisor+7,w,c
  2580  000CB0  5808               	subwfb	___aodiv@dividend+7,w,c
  2581  000CB2  A0D8               	btfss	status,0,c
  2582  000CB4  D011               	goto	l298
  2583  000CB6  5009               	movf	___aodiv@divisor,w,c
  2584  000CB8  5E01               	subwf	___aodiv@dividend,f,c
  2585  000CBA  500A               	movf	___aodiv@divisor+1,w,c
  2586  000CBC  5A02               	subwfb	___aodiv@dividend+1,f,c
  2587  000CBE  500B               	movf	___aodiv@divisor+2,w,c
  2588  000CC0  5A03               	subwfb	___aodiv@dividend+2,f,c
  2589  000CC2  500C               	movf	___aodiv@divisor+3,w,c
  2590  000CC4  5A04               	subwfb	___aodiv@dividend+3,f,c
  2591  000CC6  500D               	movf	___aodiv@divisor+4,w,c
  2592  000CC8  5A05               	subwfb	___aodiv@dividend+4,f,c
  2593  000CCA  500E               	movf	___aodiv@divisor+5,w,c
  2594  000CCC  5A06               	subwfb	___aodiv@dividend+5,f,c
  2595  000CCE  500F               	movf	___aodiv@divisor+6,w,c
  2596  000CD0  5A07               	subwfb	___aodiv@dividend+6,f,c
  2597  000CD2  5010               	movf	___aodiv@divisor+7,w,c
  2598  000CD4  5A08               	subwfb	___aodiv@dividend+7,f,c
  2599  000CD6  8013               	bsf	___aodiv@quotient,0,c
  2600  000CD8                     l298:
  2601  000CD8  90D8               	bcf	status,0,c
  2602  000CDA  3210               	rrcf	___aodiv@divisor+7,f,c
  2603  000CDC  320F               	rrcf	___aodiv@divisor+6,f,c
  2604  000CDE  320E               	rrcf	___aodiv@divisor+5,f,c
  2605  000CE0  320D               	rrcf	___aodiv@divisor+4,f,c
  2606  000CE2  320C               	rrcf	___aodiv@divisor+3,f,c
  2607  000CE4  320B               	rrcf	___aodiv@divisor+2,f,c
  2608  000CE6  320A               	rrcf	___aodiv@divisor+1,f,c
  2609  000CE8  3209               	rrcf	___aodiv@divisor,f,c
  2610  000CEA  2E11               	decfsz	___aodiv@counter,f,c
  2611  000CEC  D7C9               	goto	u700
  2612  000CEE                     l299:
  2613  000CEE  5012               	movf	___aodiv@sign,w,c
  2614  000CF0  B4D8               	btfsc	status,2,c
  2615  000CF2  D010               	goto	l300
  2616  000CF4  1E1A               	comf	___aodiv@quotient+7,f,c
  2617  000CF6  1E19               	comf	___aodiv@quotient+6,f,c
  2618  000CF8  1E18               	comf	___aodiv@quotient+5,f,c
  2619  000CFA  1E17               	comf	___aodiv@quotient+4,f,c
  2620  000CFC  1E16               	comf	___aodiv@quotient+3,f,c
  2621  000CFE  1E15               	comf	___aodiv@quotient+2,f,c
  2622  000D00  1E14               	comf	___aodiv@quotient+1,f,c
  2623  000D02  6C13               	negf	___aodiv@quotient,c
  2624  000D04  0E00               	movlw	0
  2625  000D06  2214               	addwfc	___aodiv@quotient+1,f,c
  2626  000D08  2215               	addwfc	___aodiv@quotient+2,f,c
  2627  000D0A  2216               	addwfc	___aodiv@quotient+3,f,c
  2628  000D0C  2217               	addwfc	___aodiv@quotient+4,f,c
  2629  000D0E  2218               	addwfc	___aodiv@quotient+5,f,c
  2630  000D10  2219               	addwfc	___aodiv@quotient+6,f,c
  2631  000D12  221A               	addwfc	___aodiv@quotient+7,f,c
  2632  000D14                     l300:
  2633  000D14  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2634  000D18  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2635  000D1C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2636  000D20  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2637  000D24  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2638  000D28  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2639  000D2C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2640  000D30  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2641  000D34  0012               	return	
  2642  000D36                     __end_of___aodiv:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postinc1	equ	0xFE6
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _UART_Write_String *****************
  2661 ;; Defined at:
  2662 ;;		line 72 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  text            2    1[COMRAM] PTR unsigned char 
  2665 ;;		 -> Buffer(10), STR_1(10), 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  i               2    5[COMRAM] unsigned short 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        6 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    2
  2684 ;; This function calls:
  2685 ;;		_UART_Write
  2686 ;; This function is called by:
  2687 ;;		_main
  2688 ;;		_Touch_Sense
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text15
  2693  00104C                     __ptext15:
  2694                           	opt stack 0
  2695  00104C                     _UART_Write_String:
  2696                           	opt stack 28
  2697                           
  2698                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 72: void UART_Wr
      +                          ite_String(uint8_t *text);C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X
      +                          /main.c: 73: {;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 74
      +                          :   uint16_t i;;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 7
      +                          5:   for(i=0;text[i]!='\0';i++)
  2699                           
  2700                           ;incstack = 0
  2701  00104C  0E00               	movlw	0
  2702  00104E  6E07               	movwf	UART_Write_String@i+1,c
  2703  001050  0E00               	movlw	0
  2704  001052  6E06               	movwf	UART_Write_String@i,c
  2705  001054  D01A               	goto	l98
  2706  001056                     
  2707                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 76:     UART_Wri
      +                          te(text[i]);
  2708  001056  5006               	movf	UART_Write_String@i,w,c
  2709  001058  2402               	addwf	UART_Write_String@text,w,c
  2710  00105A  6E04               	movwf	??_UART_Write_String& (0+255),c
  2711  00105C  5007               	movf	UART_Write_String@i+1,w,c
  2712  00105E  2003               	addwfc	UART_Write_String@text+1,w,c
  2713  001060  6E05               	movwf	(??_UART_Write_String+1)& (0+255),c
  2714  001062  C004  FFF6         	movff	??_UART_Write_String,tblptrl
  2715  001066  C005  FFF7         	movff	??_UART_Write_String+1,tblptrh
  2716  00106A  6AF8               	clrf	tblptru,c
  2717  00106C  0E07               	movlw	(high __ramtop+-1)
  2718  00106E  64F7               	cpfsgt	tblptrh,c
  2719  001070  D003               	bra	u1007
  2720  001072  0008               	tblrd		*
  2721  001074  50F5               	movf	tablat,w,c
  2722  001076  D005               	bra	u1000
  2723  001078                     u1007:
  2724  001078  CFF6 FFE1          	movff	tblptrl,fsr1l
  2725  00107C  CFF7 FFE2          	movff	tblptrh,fsr1h
  2726  001080  50E7               	movf	indf1,w,c
  2727  001082                     u1000:
  2728  001082  EC5B  F009         	call	_UART_Write
  2729  001086  4A06               	infsnz	UART_Write_String@i,f,c
  2730  001088  2A07               	incf	UART_Write_String@i+1,f,c
  2731  00108A                     l98:
  2732  00108A  5006               	movf	UART_Write_String@i,w,c
  2733  00108C  2402               	addwf	UART_Write_String@text,w,c
  2734  00108E  6E04               	movwf	??_UART_Write_String& (0+255),c
  2735  001090  5007               	movf	UART_Write_String@i+1,w,c
  2736  001092  2003               	addwfc	UART_Write_String@text+1,w,c
  2737  001094  6E05               	movwf	(??_UART_Write_String+1)& (0+255),c
  2738  001096  C004  FFF6         	movff	??_UART_Write_String,tblptrl
  2739  00109A  C005  FFF7         	movff	??_UART_Write_String+1,tblptrh
  2740  00109E  6AF8               	clrf	tblptru,c
  2741  0010A0  0E07               	movlw	(high __ramtop+-1)
  2742  0010A2  64F7               	cpfsgt	tblptrh,c
  2743  0010A4  D003               	bra	u1017
  2744  0010A6  0008               	tblrd		*
  2745  0010A8  50F5               	movf	tablat,w,c
  2746  0010AA  D005               	bra	u1010
  2747  0010AC                     u1017:
  2748  0010AC  CFF6 FFE1          	movff	tblptrl,fsr1l
  2749  0010B0  CFF7 FFE2          	movff	tblptrh,fsr1h
  2750  0010B4  50E7               	movf	indf1,w,c
  2751  0010B6                     u1010:
  2752  0010B6  0900               	iorlw	0
  2753  0010B8  B4D8               	btfsc	status,2,c
  2754  0010BA  0012               	return	
  2755  0010BC  D7CC               	goto	l99
  2756  0010BE                     __end_of_UART_Write_String:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           indf1	equ	0xFE7
  2765                           postinc1	equ	0xFE6
  2766                           fsr1h	equ	0xFE2
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _UART_Write *****************
  2776 ;; Defined at:
  2777 ;;		line 66 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  data            1    wreg     unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  data            1    0[COMRAM] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2791 ;;      Params:         0       0       0       0       0       0       0       0       0
  2792 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2794 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2795 ;;Total ram usage:        1 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_UART_Write_String
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text16
  2806  0012B6                     __ptext16:
  2807                           	opt stack 0
  2808  0012B6                     _UART_Write:
  2809                           	opt stack 28
  2810                           
  2811                           ;incstack = 0
  2812                           ;UART_Write@data stored from wreg
  2813  0012B6  6E01               	movwf	UART_Write@data,c
  2814  0012B8                     
  2815                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 66: void UART_Wr
      +                          ite(uint8_t data);C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c:
      +                           67: {;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 68:   whil
      +                          e(!TRMT);
  2816  0012B8  A2AC               	btfss	4012,1,c	;volatile
  2817  0012BA  D7FE               	goto	l1497
  2818                           
  2819                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 69:   TXREG = da
      +                          ta;
  2820  0012BC  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  2821  0012C0  0012               	return		;funcret
  2822  0012C2                     __end_of_UART_Write:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           tblptrh	equ	0xFF7
  2826                           tblptrl	equ	0xFF6
  2827                           tablat	equ	0xFF5
  2828                           postinc0	equ	0xFEE
  2829                           wreg	equ	0xFE8
  2830                           indf1	equ	0xFE7
  2831                           postinc1	equ	0xFE6
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           indf2	equ	0xFDF
  2835                           postinc2	equ	0xFDE
  2836                           postdec2	equ	0xFDD
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _TMR1_Init *****************
  2842 ;; Defined at:
  2843 ;;		line 78 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;		None
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         0       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2860 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:        0 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    1
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text17
  2872  001278                     __ptext17:
  2873                           	opt stack 0
  2874  001278                     _TMR1_Init:
  2875                           	opt stack 29
  2876                           
  2877                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 82:   TMR1 = 0;
  2878                           
  2879                           ;incstack = 0
  2880  001278  0E00               	movlw	0
  2881  00127A  6ECF               	movwf	4047,c	;volatile
  2882  00127C  0E00               	movlw	0
  2883  00127E  6ECE               	movwf	4046,c	;volatile
  2884                           
  2885                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 84:   TMR1CS = 0
      +                          ;
  2886  001280  92CD               	bcf	4045,1,c	;volatile
  2887                           
  2888                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 86:   T1CKPS0 = 
      +                          0;
  2889  001282  98CD               	bcf	4045,4,c	;volatile
  2890                           
  2891                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 87:   T1CKPS1 = 
      +                          0;
  2892  001284  9ACD               	bcf	4045,5,c	;volatile
  2893                           
  2894                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 89:   TMR1ON = 0
      +                          ;
  2895  001286  90CD               	bcf	4045,0,c	;volatile
  2896                           
  2897                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 91:   TMR1IE = 1
      +                          ;
  2898  001288  809D               	bsf	3997,0,c	;volatile
  2899                           
  2900                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 92:   TMR1IF = 0
      +                          ;
  2901  00128A  909E               	bcf	3998,0,c	;volatile
  2902                           
  2903                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 93:   PEIE = 1;
  2904  00128C  8CF2               	bsf	intcon,6,c	;volatile
  2905                           
  2906                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 94:   GIE = 1;
  2907  00128E  8EF2               	bsf	intcon,7,c	;volatile
  2908  001290  0012               	return		;funcret
  2909  001292                     __end_of_TMR1_Init:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           intcon	equ	0xFF2
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           indf1	equ	0xFE7
  2919                           postinc1	equ	0xFE6
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _ISR *****************
  2930 ;; Defined at:
  2931 ;;		line 44 in file "C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2945 ;;      Params:         0       0       0       0       0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		Interrupt level 2
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	intcode
  2959  000008                     __pintcode:
  2960                           	opt stack 0
  2961  000008                     _ISR:
  2962                           	opt stack 21
  2963                           
  2964                           ;incstack = 0
  2965  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2966  00000A  ED53  F009         	call	int_func,f	;refresh shadow registers
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           intcon	equ	0xFF2
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           indf1	equ	0xFE7
  2975                           postinc1	equ	0xFE6
  2976                           fsr1h	equ	0xFE2
  2977                           fsr1l	equ	0xFE1
  2978                           indf2	equ	0xFDF
  2979                           postinc2	equ	0xFDE
  2980                           postdec2	equ	0xFDD
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985                           	psect	intcode_body
  2986  0012A6                     __pintcode_body:
  2987                           	opt stack 21
  2988  0012A6                     int_func:
  2989                           	opt stack 21
  2990  0012A6  0006               	pop		; remove dummy address from shadow register refresh
  2991                           
  2992                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 46:     if(TMR1I
      +                          F)
  2993  0012A8  A09E               	btfss	3998,0,c	;volatile
  2994  0012AA  D003               	goto	i2l85
  2995                           
  2996                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 47:     {;C:/Use
      +                          rs/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 48:         TMR1_C++;
  2997  0012AC  0100               	movlb	0	; () banked
  2998  0012AE  2B6C               	incf	_TMR1_C& (0+255),f,b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;C:/Users/Khaled Magdy/Desktop/Basic Capacitive Touch Sensing.X/main.c: 49:         TMR1
      +                          IF = 0;
  3002  0012B0  909E               	bcf	3998,0,c	;volatile
  3003  0012B2                     i2l85:
  3004                           
  3005                           ; BSR set to: 0
  3006  0012B2  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3007  0012B4  0011               	retfie		f
  3008  0012B6                     __end_of_ISR:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           intcon	equ	0xFF2
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           indf1	equ	0xFE7
  3018                           postinc1	equ	0xFE6
  3019                           fsr1h	equ	0xFE2
  3020                           fsr1l	equ	0xFE1
  3021                           indf2	equ	0xFDF
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           intcon	equ	0xFF2
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           indf1	equ	0xFE7
  3035                           postinc1	equ	0xFE6
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           postdec2	equ	0xFDD
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045                           	psect	rparam
  3046  0000                     tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           intcon	equ	0xFF2
  3051                           postinc0	equ	0xFEE
  3052                           wreg	equ	0xFE8
  3053                           indf1	equ	0xFE7
  3054                           postinc1	equ	0xFE6
  3055                           fsr1h	equ	0xFE2
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064                           	psect	temp
  3065  00005E                     btemp:
  3066                           	opt stack 0
  3067  00005E                     	ds	1
  3068  0000                     int$flags	set	btemp
  3069  0000                     wtemp8	set	btemp+1
  3070  0000                     ttemp5	set	btemp+1
  3071  0000                     ttemp6	set	btemp+4
  3072  0000                     ttemp7	set	btemp+8
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           indf1	equ	0xFE7
  3081                           postinc1	equ	0xFE6
  3082                           fsr1h	equ	0xFE2
  3083                           fsr1l	equ	0xFE1
  3084                           indf2	equ	0xFDF
  3085                           postinc2	equ	0xFDE
  3086                           postdec2	equ	0xFDD
  3087                           fsr2h	equ	0xFDA
  3088                           fsr2l	equ	0xFD9
  3089                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      93
    BANK0           160     18      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> Buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> Buffer(BANK0[10]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S612_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> Buffer(BANK0[10]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> Buffer(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    UART_Write_String@text	PTR unsigned char  size(2) Largest target is 10
		 -> Buffer(BANK0[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_Touch_Sense
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _UART_Write_String->_UART_Write

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _Touch_Sense->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6984
                                             91 COMRAM     2     2      0
                          _TMR1_Init
                        _Touch_Sense
                       _UART_TX_Init
                  _UART_Write_String
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Touch_Sense                                          4     4      0    6720
                                             87 COMRAM     4     4      0
                  _UART_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18    10      8    6456
                                              0 BANK0     18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    6     4      2     264
                                              1 COMRAM     6     4      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TMR1_Init
   _Touch_Sense
     _UART_Write_String
       _UART_Write
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
   _UART_TX_Init
   _UART_Write_String
     _UART_Write

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      49       5       45.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5D       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A6      20        0.0%
DATA                 0      0      A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Sep 22 16:15:14 2019

                        l77 11A4                          l98 108A                          l99 1056  
               __CFG_BORV$3 000000  __size_of_UART_Write_String 0072                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
                       l110 0EAA                         l111 0F0E                         l300 0D14  
                       l140 1004                         l108 0E66                         l141 0FEC  
                       l150 0886                         l311 0DFC                         l143 1032  
                       l135 0FCC                         l312 0E12                         l304 0D62  
                       l152 088E                         l313 0E38                         l305 0D86  
                       l137 0FDA                         l153 08A8                         l307 0DB4  
                       l139 0FE2                         l163 0A3A                         l147 0868  
                       l308 0DA0                         l156 09BA                         l157 08C2  
                       l173 0BB2                         l181 1152                         l174 0B54  
                       l182 112C                         l167 0A22                         l178 0B9A  
                       l291 0C1A                         l292 0C42                         l294 0C7C  
                       l295 0C68                         l298 0CD8                         l299 0CEE  
                       l862 1254                         l870 0F2A                         l882 1214  
                       l883 11FE                         l898 11C8                         l899 11C4  
                       _GIE 007F97                __CFG_CPB$OFF 000000                         _RB0 007C08  
                       _RC1 007C11                         _RC2 007C12                __CFG_CPD$OFF 000000  
                       u700 0C80                         _ISR 0008                         u560 0F22  
                       u800 083C                         u650 123A                         u580 0F6A  
                       u900 09FE                         u830 087C                         u760 0DB8  
                       u920 0A0C                         u681 0C48                         u850 08A2  
                       u860 09C8                         u790 083A                         u880 09EA  
                       u960 0AD6                         u881 09E8                         u890 09F8  
              __CFG_BOR$OFF 000000                         _abs 122C                         _pad 0FB2  
                       wreg 000FE8                __CFG_IESO$ON 000000                __CFG_LVP$OFF 000000  
                      ?_ISR 0001                __CFG_WDT$OFF 000000                        ?_abs 0013  
                      l1497 12B8                        ?_pad 0011                        STR_1 0801  
                      STR_2 080B                        _BRGH 007D62                        u1000 1082  
                      u1010 10B6                        u1007 1078                        u1017 10AC  
                      u1050 0EEE                        u1107 11AE                        u1060 0EF6  
                      u1117 0F02                        u1075 0EF8                        u1097 118A  
                      _PEIE 007F96                        i2l85 12B2                        _TMR1 000FCE  
                      _SPEN 007D5F                        _TRMT 007D61                        _TXEN 007D65  
                      _SYNC 007D64                        abs@a 0013                        _dbuf 006D  
                      _main 116E                        _dtoa 0812                        _prec 0068  
                      _nout 0064                        pad@i 0018                        pad@p 0015  
                      fsr1h 000FE2                        fsr2h 000FDA                        indf1 000FE7  
                      indf2 000FDF                        fsr1l 000FE1                        pad@w 001A  
                      fsr2l 000FD9                        btemp 005E                        start 000E  
             __CFG_MCLRE$ON 000000                ___param_bank 000000                       ??_ISR 0001  
                     ??_abs 0015                       ??_pad 0017               __CFG_PLLDIV$2 000000  
            __CFG_CCP2MX$ON 000000             __end_of___aodiv 0D36                       ?_main 0001  
                     ?_dtoa 001C             __end_of___aomod 0E5A                       _BRG16 007DC3  
              vfpfcnvrt@fmt 0042                       _TMR1H 000FCF                       _TMR1L 000FCE  
                     _SPBRG 000FAF               __CFG_USBDIV$1 000000                       _TXREG 000FAD  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000                       _Ticks 0060                 ?_UART_Write 0001  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
        __size_of_TMR1_Init 001A              __CFG_EBTRB$OFF 000000                       _flags 006A  
                     _fputc 0F12                       _fputs 11F4                       pad@fp 0011  
                     _width 0066                       _putch 12C2                       dtoa@d 001E  
                     dtoa@i 003E                       dtoa@n 0036                       dtoa@p 0030  
                     dtoa@s 0034                       dtoa@w 0032                       tablat 000FF5  
                     ttemp5 005F                       ttemp6 0062                       ttemp7 0066  
                     status 000FD8                       wtemp8 005F             __end_of_sprintf 1118  
           __initialization 125E                __end_of_main 11BA                __end_of_dtoa 0A64  
                    ??_main 005C                      ??_dtoa 0026               __activetblptr 000002  
                    ?_fputc 0001                      ?_fputs 000A                      ?_putch 0001  
                    _TMR1IE 007CE8                      _TMR1IF 007CF0                      _TMR1CS 007E69  
                    _TMR1ON 007E68                      _TMR1_C 006C                      _TRISB0 007C98  
                    _TRISC1 007CA1                      _TRISC2 007CA2                      _TRISC6 007CA6  
                    _TRISC7 007CA7                      _Buffer 008D              __CFG_XINST$OFF 000000  
              vfprintf@cfmt 0056           __end_of_TMR1_Init 1292         __size_of_UART_Write 000C  
                 ??___aodiv 0011                   ??___aomod 0011              __CFG_STVREN$ON 000000  
                    clear_0 1264                      pad@buf 0013                      dtoa@fp 001C  
                    _strlen 11BA                      fputc@c 0001                      fputs@c 000E  
                    fputs@i 000F                      fputs@s 000A                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                    putch@c 0001            __end_of_vfprintf 116E                   ??_sprintf 0058  
                __accesstop 0060     __end_of__initialization 126A             __CFG_PBADEN$OFF 000000  
             ___rparam_used 000001              __pcstackCOMRAM 0001               __end_of_fputc 0FB2  
             __end_of_fputs 122C               __end_of_putch 12C4               ??_Touch_Sense 0058  
                   ??_fputc 0005                     ??_fputs 000E                     ??_putch 0001  
                __pbssBANK0 0060                     _T1CKPS0 007E6C                     _T1CKPS1 007E6D  
                   ?_strlen 0001                ??_UART_Write 0001          __size_of_vfpfcnvrt 018A  
       __end_of_Touch_Sense 0F12               ?_UART_TX_Init 0001             __CFG_VREGEN$OFF 000000  
                   __Hparam 0000                     __Lparam 0000                     ___aodiv 0BEE  
                   ___aomod 0D36          __end_of_UART_Write 12C2                   ?_vfprintf 0050  
              __psmallconst 0800                     __pcinit 125E                     __ramtop 0800  
                   __ptext0 116E                     __ptext1 1292                     __ptext2 0E5A  
                   __ptext3 10BE                     __ptext4 1118                     __ptext5 0A64  
                   __ptext6 0812                     __ptext7 0FB2                     __ptext8 11BA  
                   __ptext9 11F4             __size_of_strlen 003A                __size_of_ISR 12AE  
              __size_of_abs 0032                __size_of_pad 009A              ??_UART_TX_Init 0001  
                   _sprintf 10BE              __pintcode_body 12A6        end_of_initialization 126A  
                   fputc@fp 0003               __Lmediumconst 0000                     int_func 12A6  
                   fputs@fp 000C           __end_of_vfpfcnvrt 0BEE                     postdec2 000FDD  
                   postinc0 000FEE                     postinc1 000FE6                     postinc2 000FDE  
                ??_vfprintf 0056                     strlen@a 0005                     strlen@s 0001  
                 _TMR1_Init 1278              UART_Write@data 0001                 _Touch_Sense 0E5A  
     UART_Write_String@text 0002                 vfpfcnvrt@ap 0044                 vfpfcnvrt@fp 0040  
               vfpfcnvrt@ll 0048                  ?_TMR1_Init 0001              __end_of_strlen 11F4  
       start_initialization 125E                 __end_of_ISR 12B6                 __end_of_abs 125E  
               __end_of_pad 104C                 vfprintf@fmt 0052        __end_of_UART_TX_Init 12A6  
          __CFG_LPT1OSC$OFF 000000                    ??_strlen 0003               __pcstackBANK0 0097  
          ___aodiv@dividend 0001                   __pintcode 0008                    ?___aodiv 0001  
                  ?___aomod 0001            ___aodiv@quotient 0013                 ??_TMR1_Init 0001  
         __size_of_vfprintf 0056                 __smallconst 0800                    ?_sprintf 0097  
            __size_of_fputc 00A0              __size_of_fputs 0038              __size_of_putch 0002  
          __CFG_WDTPS$32768 000000                   _vfpfcnvrt 0A64                ?_Touch_Sense 0001  
     __size_of_UART_TX_Init 0014                    __Hrparam 0000                  vfprintf@ap 0054  
                  __Lrparam 0000                  vfprintf@fp 0050            __size_of___aodiv 0148  
          __size_of___aomod 0124                  ?_vfpfcnvrt 0040             ___aodiv@divisor 0009  
           ___aodiv@counter 0011           _UART_Write_String 104C                  sprintf@fmt 0099  
                sprintf@ret 009F          ?_UART_Write_String 0002                    _dtoa$151 002E  
                  __ptext10 0F12                    __ptext11 12C2                    __ptext12 122C  
                  __ptext13 0D36                    __ptext14 0BEE                    __ptext15 104C  
                  __ptext16 12B6                    __ptext17 1278            __size_of_sprintf 005A  
              _UART_TX_Init 1292         ??_UART_Write_String 0004               __size_of_main 004C  
             __size_of_dtoa 0252                    int$flags 005E                    _vfprintf 1118  
 __end_of_UART_Write_String 10BE            ___aomod@dividend 0001       __CFG_CPUDIV$OSC1_PLL2 000000  
                  intlevel2 0000                   sprintf@ap 00A1          UART_Write_String@i 0006  
           ___aomod@divisor 0009                 ??_vfpfcnvrt 0046             ___aomod@counter 0011  
                  sprintf@f 00A3                    sprintf@s 0097                  _UART_Write 12B6  
      __size_of_Touch_Sense 00B8                ___aodiv@sign 0012          __CFG_FOSC$HSPLL_HS 000000  
              ___aomod@sign 0012  
